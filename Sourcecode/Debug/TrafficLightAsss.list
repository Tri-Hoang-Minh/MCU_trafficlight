
TrafficLightAsss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000508c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800526c  0800526c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800526c  0800526c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800526c  0800526c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000090  08005304  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08005304  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016503  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd0  00000000  00000000  000365bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fbe  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ec6  00000000  00000000  00054e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4a6  00000000  00000000  00066d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f21fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000f2250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08005180 	.word	0x08005180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08005180 	.word	0x08005180

0800014c <fsm_automode>:
 * First state of automatic mode:
 * Traffic light 1 : GREEN ON.
 * Traffic light 2: RED ON.
 */
void fsm_automode()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// index=0: traffic light 1         and  index=1 : traffic light 2
	switch(status_light)
 8000150:	4bbe      	ldr	r3, [pc, #760]	; (800044c <fsm_automode+0x300>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	f200 8171 	bhi.w	800043c <fsm_automode+0x2f0>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automode+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000175 	.word	0x08000175
 8000164:	0800019d 	.word	0x0800019d
 8000168:	08000241 	.word	0x08000241
 800016c:	080002f7 	.word	0x080002f7
 8000170:	08000391 	.word	0x08000391
	{
	     case  AUTO_INIT:
	    	   clearLED(2);
 8000174:	2002      	movs	r0, #2
 8000176:	f000 ff8f 	bl	8001098 <clearLED>
	    	   // set GREEN1
	    	   setTimer3(time_led_green_1);
 800017a:	4bb5      	ldr	r3, [pc, #724]	; (8000450 <fsm_automode+0x304>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4618      	mov	r0, r3
 8000180:	f001 fc64 	bl	8001a4c <setTimer3>
	    	   // set REDD2
	    	   setTimer4(time_led_red_2);      //10s
 8000184:	4bb3      	ldr	r3, [pc, #716]	; (8000454 <fsm_automode+0x308>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4618      	mov	r0, r3
 800018a:	f001 fc7b 	bl	8001a84 <setTimer4>
	    	   setTimer2(10);
 800018e:	200a      	movs	r0, #10
 8000190:	f001 fc40 	bl	8001a14 <setTimer2>
	    	   status_light=AUTO_GREEN_1;
 8000194:	4bad      	ldr	r3, [pc, #692]	; (800044c <fsm_automode+0x300>)
 8000196:	2201      	movs	r2, #1
 8000198:	601a      	str	r2, [r3, #0]
	    break;
 800019a:	e170      	b.n	800047e <fsm_automode+0x332>
	     case  AUTO_GREEN_1:  //3500
	    	   ToggleLEDGreen(0);
 800019c:	2000      	movs	r0, #0
 800019e:	f000 ff01 	bl	8000fa4 <ToggleLEDGreen>
               ToggleLEDRed(1);
 80001a2:	2001      	movs	r0, #1
 80001a4:	f000 fe7e 	bl	8000ea4 <ToggleLEDRed>
               sendDATA();
 80001a8:	f000 fc42 	bl	8000a30 <sendDATA>
               if(timer3_flag==1)
 80001ac:	4baa      	ldr	r3, [pc, #680]	; (8000458 <fsm_automode+0x30c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d107      	bne.n	80001c4 <fsm_automode+0x78>
               {
            	   setTimer3(time_led_yellow_1);
 80001b4:	4ba9      	ldr	r3, [pc, #676]	; (800045c <fsm_automode+0x310>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fc47 	bl	8001a4c <setTimer3>
            	   status_light=AUTO_YELLOW_1;
 80001be:	4ba3      	ldr	r3, [pc, #652]	; (800044c <fsm_automode+0x300>)
 80001c0:	2202      	movs	r2, #2
 80001c2:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
                // AUTO GREEN 1:  Pedestrian state is PEDE_GO because pedes_light is located in traffic light 2, In current, traffic light 2 is red => PEDES_Light = GREEN.
   			if(is_button_pressed(0))
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fe2d 	bl	8000e24 <is_button_pressed>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d011      	beq.n	80001f4 <fsm_automode+0xa8>
   			{ // button of pedestrian is pressed().
   				status_pedes = PEDES_GO;
 80001d0:	4ba3      	ldr	r3, [pc, #652]	; (8000460 <fsm_automode+0x314>)
 80001d2:	220a      	movs	r2, #10
 80001d4:	601a      	str	r2, [r3, #0]
   				setTimer5(BUZZER_DUTY_CYCLE);
 80001d6:	f240 5014 	movw	r0, #1300	; 0x514
 80001da:	f001 fc6f 	bl	8001abc <setTimer5>
   				setTimer1(TIME_PEDESTRIAN_LIGHT);                            // 20.000 (20s).
 80001de:	f644 6020 	movw	r0, #20000	; 0x4e20
 80001e2:	f001 fbfb 	bl	80019dc <setTimer1>
                time_buzzer=BUZZER_DUTY_CYCLE;
 80001e6:	4b9f      	ldr	r3, [pc, #636]	; (8000464 <fsm_automode+0x318>)
 80001e8:	f240 5214 	movw	r2, #1300	; 0x514
 80001ec:	601a      	str	r2, [r3, #0]
                time_frequency=BUZZER_FREQUENCY_START;
 80001ee:	4b9e      	ldr	r3, [pc, #632]	; (8000468 <fsm_automode+0x31c>)
 80001f0:	2232      	movs	r2, #50	; 0x32
 80001f2:	601a      	str	r2, [r3, #0]
   			}

           // TODO: implementation fsm_button for TUNNING MODE.
   			if(is_button_pressed(2))  // button 2 is pressed.
 80001f4:	2002      	movs	r0, #2
 80001f6:	f000 fe15 	bl	8000e24 <is_button_pressed>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d009      	beq.n	8000214 <fsm_automode+0xc8>
   			{
   				status_light=SETTING_LED_RED;
 8000200:	4b92      	ldr	r3, [pc, #584]	; (800044c <fsm_automode+0x300>)
 8000202:	220b      	movs	r2, #11
 8000204:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000206:	4b96      	ldr	r3, [pc, #600]	; (8000460 <fsm_automode+0x314>)
 8000208:	f04f 32ff 	mov.w	r2, #4294967295
 800020c:	601a      	str	r2, [r3, #0]
				//setTimer3(TUNING_TIME);  //10000
				setTimer8(12);
 800020e:	200c      	movs	r0, #12
 8000210:	f001 fca8 	bl	8001b64 <setTimer8>
   			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
   			if(is_button_pressed(1))  // button 1 is pressed.
 8000214:	2001      	movs	r0, #1
 8000216:	f000 fe05 	bl	8000e24 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	f000 810f 	beq.w	8000440 <fsm_automode+0x2f4>
   			{
   				status_light=MAN_GREEN_1;
 8000222:	4b8a      	ldr	r3, [pc, #552]	; (800044c <fsm_automode+0x300>)
 8000224:	2205      	movs	r2, #5
 8000226:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000228:	4b8d      	ldr	r3, [pc, #564]	; (8000460 <fsm_automode+0x314>)
 800022a:	f04f 32ff 	mov.w	r2, #4294967295
 800022e:	601a      	str	r2, [r3, #0]
   				setTimer9(TIME_MANUAL_MODE);
 8000230:	f242 7010 	movw	r0, #10000	; 0x2710
 8000234:	f001 fcb2 	bl	8001b9c <setTimer9>
   				setTimer2(10);
 8000238:	200a      	movs	r0, #10
 800023a:	f001 fbeb 	bl	8001a14 <setTimer2>
   			}

	    break;
 800023e:	e0ff      	b.n	8000440 <fsm_automode+0x2f4>
	     case  AUTO_YELLOW_1:   // 3s => 3s
	    	   ToggleLEDYellow(0);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fe6f 	bl	8000f24 <ToggleLEDYellow>
               ToggleLEDRed(1);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fe2c 	bl	8000ea4 <ToggleLEDRed>
               sendDATA();
 800024c:	f000 fbf0 	bl	8000a30 <sendDATA>
               if(timer4_flag==1 && timer3_flag==1)
 8000250:	4b86      	ldr	r3, [pc, #536]	; (800046c <fsm_automode+0x320>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d110      	bne.n	800027a <fsm_automode+0x12e>
 8000258:	4b7f      	ldr	r3, [pc, #508]	; (8000458 <fsm_automode+0x30c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d10c      	bne.n	800027a <fsm_automode+0x12e>
               {
            	   setTimer3(time_led_red_1);
 8000260:	4b83      	ldr	r3, [pc, #524]	; (8000470 <fsm_automode+0x324>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fbf1 	bl	8001a4c <setTimer3>
            	   setTimer4(time_led_green_2);
 800026a:	4b82      	ldr	r3, [pc, #520]	; (8000474 <fsm_automode+0x328>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fc08 	bl	8001a84 <setTimer4>
            	   status_light=AUTO_GREEN_2;
 8000274:	4b75      	ldr	r3, [pc, #468]	; (800044c <fsm_automode+0x300>)
 8000276:	2203      	movs	r2, #3
 8000278:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
      			if(is_button_pressed(0))
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fdd2 	bl	8000e24 <is_button_pressed>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d011      	beq.n	80002aa <fsm_automode+0x15e>
      			{ // button of pedestrian is pressed().
      				status_pedes = PEDES_GO;
 8000286:	4b76      	ldr	r3, [pc, #472]	; (8000460 <fsm_automode+0x314>)
 8000288:	220a      	movs	r2, #10
 800028a:	601a      	str	r2, [r3, #0]
      				setTimer5(BUZZER_DUTY_CYCLE);
 800028c:	f240 5014 	movw	r0, #1300	; 0x514
 8000290:	f001 fc14 	bl	8001abc <setTimer5>
      				setTimer1(TIME_PEDESTRIAN_LIGHT);                            // 20.000 (20s).
 8000294:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000298:	f001 fba0 	bl	80019dc <setTimer1>
                    time_buzzer=BUZZER_DUTY_CYCLE;
 800029c:	4b71      	ldr	r3, [pc, #452]	; (8000464 <fsm_automode+0x318>)
 800029e:	f240 5214 	movw	r2, #1300	; 0x514
 80002a2:	601a      	str	r2, [r3, #0]
                    time_frequency=BUZZER_FREQUENCY_START;
 80002a4:	4b70      	ldr	r3, [pc, #448]	; (8000468 <fsm_automode+0x31c>)
 80002a6:	2232      	movs	r2, #50	; 0x32
 80002a8:	601a      	str	r2, [r3, #0]
      			}
           // TODO: implementation fsm_button for TUNNING MODE.
       			if(is_button_pressed(2))  // button 2 is pressed.
 80002aa:	2002      	movs	r0, #2
 80002ac:	f000 fdba 	bl	8000e24 <is_button_pressed>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d009      	beq.n	80002ca <fsm_automode+0x17e>
       			{
       				status_light=SETTING_LED_RED;
 80002b6:	4b65      	ldr	r3, [pc, #404]	; (800044c <fsm_automode+0x300>)
 80002b8:	220b      	movs	r2, #11
 80002ba:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80002bc:	4b68      	ldr	r3, [pc, #416]	; (8000460 <fsm_automode+0x314>)
 80002be:	f04f 32ff 	mov.w	r2, #4294967295
 80002c2:	601a      	str	r2, [r3, #0]
    				//setTimer3(TUNING_TIME);  //10000
    				setTimer8(12);
 80002c4:	200c      	movs	r0, #12
 80002c6:	f001 fc4d 	bl	8001b64 <setTimer8>
       			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
       			if(is_button_pressed(1))  // button 1 is pressed.
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 fdaa 	bl	8000e24 <is_button_pressed>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	f000 80b6 	beq.w	8000444 <fsm_automode+0x2f8>
       			{
       				status_light=MAN_YELLOW_1;
 80002d8:	4b5c      	ldr	r3, [pc, #368]	; (800044c <fsm_automode+0x300>)
 80002da:	2206      	movs	r2, #6
 80002dc:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 80002de:	4b60      	ldr	r3, [pc, #384]	; (8000460 <fsm_automode+0x314>)
 80002e0:	f04f 32ff 	mov.w	r2, #4294967295
 80002e4:	601a      	str	r2, [r3, #0]
       				setTimer9(TIME_MANUAL_MODE);
 80002e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80002ea:	f001 fc57 	bl	8001b9c <setTimer9>
       				setTimer2(10);
 80002ee:	200a      	movs	r0, #10
 80002f0:	f001 fb90 	bl	8001a14 <setTimer2>
       			}

	    break;
 80002f4:	e0a6      	b.n	8000444 <fsm_automode+0x2f8>
	     case  AUTO_GREEN_2:
	    	   ToggleLEDRed(0);   // RED 1 on
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fdd4 	bl	8000ea4 <ToggleLEDRed>
               ToggleLEDGreen(1);  // GREEN 2 on
 80002fc:	2001      	movs	r0, #1
 80002fe:	f000 fe51 	bl	8000fa4 <ToggleLEDGreen>
               sendDATA();
 8000302:	f000 fb95 	bl	8000a30 <sendDATA>
               if(timer4_flag==1)
 8000306:	4b59      	ldr	r3, [pc, #356]	; (800046c <fsm_automode+0x320>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d107      	bne.n	800031e <fsm_automode+0x1d2>
               {
            	   //setTimer3(time_led_red_1);
            	   setTimer4(time_led_yellow_2);
 800030e:	4b5a      	ldr	r3, [pc, #360]	; (8000478 <fsm_automode+0x32c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fbb6 	bl	8001a84 <setTimer4>
            	   status_light=AUTO_YELLOW_2;
 8000318:	4b4c      	ldr	r3, [pc, #304]	; (800044c <fsm_automode+0x300>)
 800031a:	2204      	movs	r2, #4
 800031c:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
   			if(is_button_pressed(0))
 800031e:	2000      	movs	r0, #0
 8000320:	f000 fd80 	bl	8000e24 <is_button_pressed>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d00d      	beq.n	8000346 <fsm_automode+0x1fa>
   			{
   				status_pedes =	PEDES_STOP;
 800032a:	4b4d      	ldr	r3, [pc, #308]	; (8000460 <fsm_automode+0x314>)
 800032c:	2209      	movs	r2, #9
 800032e:	601a      	str	r2, [r3, #0]
   				setTimer1(TIME_PEDESTRIAN_LIGHT);
 8000330:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000334:	f001 fb52 	bl	80019dc <setTimer1>
   				time_buzzer = BUZZER_DUTY_CYCLE;
 8000338:	4b4a      	ldr	r3, [pc, #296]	; (8000464 <fsm_automode+0x318>)
 800033a:	f240 5214 	movw	r2, #1300	; 0x514
 800033e:	601a      	str	r2, [r3, #0]
   				time_frequency = BUZZER_FREQUENCY_START;
 8000340:	4b49      	ldr	r3, [pc, #292]	; (8000468 <fsm_automode+0x31c>)
 8000342:	2232      	movs	r2, #50	; 0x32
 8000344:	601a      	str	r2, [r3, #0]
   			}

           // TODO: implementation fsm_button for TUNNING MODE.
   			if(is_button_pressed(2))  // button 2 is pressed.
 8000346:	2002      	movs	r0, #2
 8000348:	f000 fd6c 	bl	8000e24 <is_button_pressed>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d009      	beq.n	8000366 <fsm_automode+0x21a>
   			{
   				status_light=SETTING_LED_RED;
 8000352:	4b3e      	ldr	r3, [pc, #248]	; (800044c <fsm_automode+0x300>)
 8000354:	220b      	movs	r2, #11
 8000356:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000358:	4b41      	ldr	r3, [pc, #260]	; (8000460 <fsm_automode+0x314>)
 800035a:	f04f 32ff 	mov.w	r2, #4294967295
 800035e:	601a      	str	r2, [r3, #0]
				//setTimer3(TUNING_TIME);  //10000
				setTimer8(12);
 8000360:	200c      	movs	r0, #12
 8000362:	f001 fbff 	bl	8001b64 <setTimer8>
   			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
 			if(is_button_pressed(1))  // button 1 is pressed.
 8000366:	2001      	movs	r0, #1
 8000368:	f000 fd5c 	bl	8000e24 <is_button_pressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d06a      	beq.n	8000448 <fsm_automode+0x2fc>
   			{
   				status_light=MAN_GREEN_2;
 8000372:	4b36      	ldr	r3, [pc, #216]	; (800044c <fsm_automode+0x300>)
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
   				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000378:	4b39      	ldr	r3, [pc, #228]	; (8000460 <fsm_automode+0x314>)
 800037a:	f04f 32ff 	mov.w	r2, #4294967295
 800037e:	601a      	str	r2, [r3, #0]
   				setTimer9(TIME_MANUAL_MODE);
 8000380:	f242 7010 	movw	r0, #10000	; 0x2710
 8000384:	f001 fc0a 	bl	8001b9c <setTimer9>
   				setTimer2(10);
 8000388:	200a      	movs	r0, #10
 800038a:	f001 fb43 	bl	8001a14 <setTimer2>
   			}
	    break;
 800038e:	e05b      	b.n	8000448 <fsm_automode+0x2fc>
	     case  AUTO_YELLOW_2:
	    	   ToggleLEDRed(0);  // RED 1 on
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fd87 	bl	8000ea4 <ToggleLEDRed>
               ToggleLEDYellow(1);  // YELLOW 2 on
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fdc4 	bl	8000f24 <ToggleLEDYellow>
               sendDATA();
 800039c:	f000 fb48 	bl	8000a30 <sendDATA>
               if(timer4_flag==1 && timer3_flag==1)
 80003a0:	4b32      	ldr	r3, [pc, #200]	; (800046c <fsm_automode+0x320>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d110      	bne.n	80003ca <fsm_automode+0x27e>
 80003a8:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <fsm_automode+0x30c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10c      	bne.n	80003ca <fsm_automode+0x27e>
               {
            	   setTimer3(time_led_green_1);
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <fsm_automode+0x304>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fb49 	bl	8001a4c <setTimer3>
            	   setTimer4(time_led_red_2);
 80003ba:	4b26      	ldr	r3, [pc, #152]	; (8000454 <fsm_automode+0x308>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fb60 	bl	8001a84 <setTimer4>
            	   status_light=AUTO_GREEN_1;
 80003c4:	4b21      	ldr	r3, [pc, #132]	; (800044c <fsm_automode+0x300>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
               }
           // TODO: implementation fsm_button for PEDES MODE.
      			if(is_button_pressed(0))
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fd2a 	bl	8000e24 <is_button_pressed>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d00d      	beq.n	80003f2 <fsm_automode+0x2a6>
      			{
      				status_pedes =	PEDES_STOP;
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <fsm_automode+0x314>)
 80003d8:	2209      	movs	r2, #9
 80003da:	601a      	str	r2, [r3, #0]
      				setTimer1(TIME_PEDESTRIAN_LIGHT);  // out pedes state
 80003dc:	f644 6020 	movw	r0, #20000	; 0x4e20
 80003e0:	f001 fafc 	bl	80019dc <setTimer1>
      				time_buzzer = BUZZER_DUTY_CYCLE;
 80003e4:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <fsm_automode+0x318>)
 80003e6:	f240 5214 	movw	r2, #1300	; 0x514
 80003ea:	601a      	str	r2, [r3, #0]
      				time_frequency = BUZZER_FREQUENCY_START;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <fsm_automode+0x31c>)
 80003ee:	2232      	movs	r2, #50	; 0x32
 80003f0:	601a      	str	r2, [r3, #0]
      			}
           // TODO: implementation fsm_button for TUNNING MODE.
       			if(is_button_pressed(2))  // button 2 is pressed.
 80003f2:	2002      	movs	r0, #2
 80003f4:	f000 fd16 	bl	8000e24 <is_button_pressed>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d009      	beq.n	8000412 <fsm_automode+0x2c6>
       			{
       				status_light=SETTING_LED_RED;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <fsm_automode+0x300>)
 8000400:	220b      	movs	r2, #11
 8000402:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <fsm_automode+0x314>)
 8000406:	f04f 32ff 	mov.w	r2, #4294967295
 800040a:	601a      	str	r2, [r3, #0]
    				//setTimer3(TUNING_TIME);  //10000
    				setTimer8(12);
 800040c:	200c      	movs	r0, #12
 800040e:	f001 fba9 	bl	8001b64 <setTimer8>
       			}

           // TODO: implementation fsm_button for CHANGE MODE (AUTO=> MANUAL).
     			if(is_button_pressed(1))  // button 1 is pressed.
 8000412:	2001      	movs	r0, #1
 8000414:	f000 fd06 	bl	8000e24 <is_button_pressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d02e      	beq.n	800047c <fsm_automode+0x330>
       			{
       				status_light=MAN_YELLOW_2;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <fsm_automode+0x300>)
 8000420:	2208      	movs	r2, #8
 8000422:	601a      	str	r2, [r3, #0]
       				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <fsm_automode+0x314>)
 8000426:	f04f 32ff 	mov.w	r2, #4294967295
 800042a:	601a      	str	r2, [r3, #0]
       				setTimer9(TIME_MANUAL_MODE);
 800042c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000430:	f001 fbb4 	bl	8001b9c <setTimer9>
       				setTimer2(10);
 8000434:	200a      	movs	r0, #10
 8000436:	f001 faed 	bl	8001a14 <setTimer2>
       			}
	    break;
 800043a:	e01f      	b.n	800047c <fsm_automode+0x330>
	     default:
	     break;
 800043c:	bf00      	nop
 800043e:	e01e      	b.n	800047e <fsm_automode+0x332>
	    break;
 8000440:	bf00      	nop
 8000442:	e01c      	b.n	800047e <fsm_automode+0x332>
	    break;
 8000444:	bf00      	nop
 8000446:	e01a      	b.n	800047e <fsm_automode+0x332>
	    break;
 8000448:	bf00      	nop
 800044a:	e018      	b.n	800047e <fsm_automode+0x332>
 800044c:	200000ec 	.word	0x200000ec
 8000450:	20000010 	.word	0x20000010
 8000454:	20000014 	.word	0x20000014
 8000458:	2000012c 	.word	0x2000012c
 800045c:	2000000c 	.word	0x2000000c
 8000460:	20000004 	.word	0x20000004
 8000464:	200000f0 	.word	0x200000f0
 8000468:	200000f4 	.word	0x200000f4
 800046c:	20000134 	.word	0x20000134
 8000470:	20000008 	.word	0x20000008
 8000474:	2000001c 	.word	0x2000001c
 8000478:	20000018 	.word	0x20000018
	    break;
 800047c:	bf00      	nop
	}
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop

08000484 <fsm_manual_mode>:
 *      Author: Hoang Tri
 */
#include "FSM_MANUALMODE.h"

void fsm_manual_mode()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
     switch(status_light)
 8000488:	4ba5      	ldr	r3, [pc, #660]	; (8000720 <fsm_manual_mode+0x29c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b05      	subs	r3, #5
 800048e:	2b03      	cmp	r3, #3
 8000490:	f200 813a 	bhi.w	8000708 <fsm_manual_mode+0x284>
 8000494:	a201      	add	r2, pc, #4	; (adr r2, 800049c <fsm_manual_mode+0x18>)
 8000496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049a:	bf00      	nop
 800049c:	080004ad 	.word	0x080004ad
 80004a0:	08000545 	.word	0x08000545
 80004a4:	080005dd 	.word	0x080005dd
 80004a8:	08000673 	.word	0x08000673
     {
        case MAN_GREEN_1:
        	// Traffic light 1 is GREEN and traffic light 2 is RED.
       	     ToggleLEDGreen(0);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f000 fd79 	bl	8000fa4 <ToggleLEDGreen>
        	 ToggleLEDRed(1);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fcf6 	bl	8000ea4 <ToggleLEDRed>
        //	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 fcb3 	bl	8000e24 <is_button_pressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d006      	beq.n	80004d2 <fsm_manual_mode+0x4e>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 80004c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80004c8:	f001 fb68 	bl	8001b9c <setTimer9>
        		 status_light=MAN_YELLOW_1;
 80004cc:	4b94      	ldr	r3, [pc, #592]	; (8000720 <fsm_manual_mode+0x29c>)
 80004ce:	2206      	movs	r2, #6
 80004d0:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 80004d2:	4b94      	ldr	r3, [pc, #592]	; (8000724 <fsm_manual_mode+0x2a0>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d111      	bne.n	80004fe <fsm_manual_mode+0x7a>
        	 {
        		 status_light=AUTO_YELLOW_1; //(YELLOW in traffic light 1 on, RED in traffic light 2 on)
 80004da:	4b91      	ldr	r3, [pc, #580]	; (8000720 <fsm_manual_mode+0x29c>)
 80004dc:	2202      	movs	r2, #2
 80004de:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_yellow_1);
 80004e0:	4b91      	ldr	r3, [pc, #580]	; (8000728 <fsm_manual_mode+0x2a4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fb59 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_yellow_1);
 80004ea:	4b8f      	ldr	r3, [pc, #572]	; (8000728 <fsm_manual_mode+0x2a4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fac8 	bl	8001a84 <setTimer4>
           		 setTimer3(time_led_yellow_1);
 80004f4:	4b8c      	ldr	r3, [pc, #560]	; (8000728 <fsm_manual_mode+0x2a4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 faa7 	bl	8001a4c <setTimer3>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_GREEN_1 => AUTO_YELLOW_1_)
        	 if(is_button_pressed(3))  // button 3 is Pressed.
 80004fe:	2003      	movs	r0, #3
 8000500:	f000 fc90 	bl	8000e24 <is_button_pressed>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d011      	beq.n	800052e <fsm_manual_mode+0xaa>
        	 {
        		 status_light=AUTO_YELLOW_1; //(YELLOW in traffic light 1 on, RED in traffic light 2 on)
 800050a:	4b85      	ldr	r3, [pc, #532]	; (8000720 <fsm_manual_mode+0x29c>)
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_yellow_1);
 8000510:	4b85      	ldr	r3, [pc, #532]	; (8000728 <fsm_manual_mode+0x2a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fb41 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_yellow_1);
 800051a:	4b83      	ldr	r3, [pc, #524]	; (8000728 <fsm_manual_mode+0x2a4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fab0 	bl	8001a84 <setTimer4>
           		 setTimer3(time_led_yellow_1);
 8000524:	4b80      	ldr	r3, [pc, #512]	; (8000728 <fsm_manual_mode+0x2a4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fa8f 	bl	8001a4c <setTimer3>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(3))  // button 1 is holded 1s.
 800052e:	2003      	movs	r0, #3
 8000530:	f000 fc98 	bl	8000e64 <is_button_pressed_1s>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 80e8 	beq.w	800070c <fsm_manual_mode+0x288>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800053c:	4b78      	ldr	r3, [pc, #480]	; (8000720 <fsm_manual_mode+0x29c>)
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
    				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
 				     //setTimer3(TUNING_TIME);  //10000
 				     setTimer8(12);
    			}
*/
        	 break;
 8000542:	e0e3      	b.n	800070c <fsm_manual_mode+0x288>


        case MAN_YELLOW_1:
        	// Traffic light 1 is YELLOW and traffic light 2 is RED.
       	     ToggleLEDYellow(0);
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fced 	bl	8000f24 <ToggleLEDYellow>
        	 ToggleLEDRed(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 fcaa 	bl	8000ea4 <ToggleLEDRed>
       // 	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 8000550:	2001      	movs	r0, #1
 8000552:	f000 fc67 	bl	8000e24 <is_button_pressed>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <fsm_manual_mode+0xe6>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 800055c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000560:	f001 fb1c 	bl	8001b9c <setTimer9>
        		 status_light=MAN_GREEN_2;
 8000564:	4b6e      	ldr	r3, [pc, #440]	; (8000720 <fsm_manual_mode+0x29c>)
 8000566:	2207      	movs	r2, #7
 8000568:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 800056a:	4b6e      	ldr	r3, [pc, #440]	; (8000724 <fsm_manual_mode+0x2a0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d111      	bne.n	8000596 <fsm_manual_mode+0x112>
        	 {
        		 status_light=AUTO_GREEN_2; //(RED in traffic light 1 on, GREEN in traffic light 2 on)
 8000572:	4b6b      	ldr	r3, [pc, #428]	; (8000720 <fsm_manual_mode+0x29c>)
 8000574:	2203      	movs	r2, #3
 8000576:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_red_1);
 8000578:	4b6c      	ldr	r3, [pc, #432]	; (800072c <fsm_manual_mode+0x2a8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f001 fb0d 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_green_2);
 8000582:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <fsm_manual_mode+0x2ac>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fa7c 	bl	8001a84 <setTimer4>
        		 setTimer3(time_led_red_1);
 800058c:	4b67      	ldr	r3, [pc, #412]	; (800072c <fsm_manual_mode+0x2a8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fa5b 	bl	8001a4c <setTimer3>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_YELLOW_1 => AUTO_GREEN_2)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 8000596:	2003      	movs	r0, #3
 8000598:	f000 fc44 	bl	8000e24 <is_button_pressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d011      	beq.n	80005c6 <fsm_manual_mode+0x142>
        	 {
        		 status_light=AUTO_GREEN_2; //(RED in traffic light 1 on, GREEN in traffic light 2 on)
 80005a2:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <fsm_manual_mode+0x29c>)
 80005a4:	2203      	movs	r2, #3
 80005a6:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_red_1);
 80005a8:	4b60      	ldr	r3, [pc, #384]	; (800072c <fsm_manual_mode+0x2a8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 faf5 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_green_2);
 80005b2:	4b5f      	ldr	r3, [pc, #380]	; (8000730 <fsm_manual_mode+0x2ac>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa64 	bl	8001a84 <setTimer4>
        		 setTimer3(time_led_red_1);
 80005bc:	4b5b      	ldr	r3, [pc, #364]	; (800072c <fsm_manual_mode+0x2a8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fa43 	bl	8001a4c <setTimer3>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(3))  // button 1 is holded 1s.
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 fc4c 	bl	8000e64 <is_button_pressed_1s>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 809e 	beq.w	8000710 <fsm_manual_mode+0x28c>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80005d4:	4b52      	ldr	r3, [pc, #328]	; (8000720 <fsm_manual_mode+0x29c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
// 				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
//				//setTimer3(TUNING_TIME);  //10000
//				setTimer8(12);
// 			}

        	 break;
 80005da:	e099      	b.n	8000710 <fsm_manual_mode+0x28c>

        case MAN_GREEN_2:
        	// Traffic light 1 is RED and traffic light 2 is GREEN.
       	     ToggleLEDRed(0);
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fc61 	bl	8000ea4 <ToggleLEDRed>
        	 ToggleLEDGreen(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fcde 	bl	8000fa4 <ToggleLEDGreen>
       // 	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fc1b 	bl	8000e24 <is_button_pressed>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <fsm_manual_mode+0x17e>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 80005f4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f8:	f001 fad0 	bl	8001b9c <setTimer9>
        		 status_light=MAN_YELLOW_2;
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <fsm_manual_mode+0x29c>)
 80005fe:	2208      	movs	r2, #8
 8000600:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 8000602:	4b48      	ldr	r3, [pc, #288]	; (8000724 <fsm_manual_mode+0x2a0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d111      	bne.n	800062e <fsm_manual_mode+0x1aa>
        	 {
        		 status_light=AUTO_YELLOW_2; //(RED in traffic light 1 on, YELLOW in traffic light 2 on)
 800060a:	4b45      	ldr	r3, [pc, #276]	; (8000720 <fsm_manual_mode+0x29c>)
 800060c:	2204      	movs	r2, #4
 800060e:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_yellow_2);
 8000610:	4b48      	ldr	r3, [pc, #288]	; (8000734 <fsm_manual_mode+0x2b0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fac1 	bl	8001b9c <setTimer9>
        		 setTimer3(time_led_yellow_2);
 800061a:	4b46      	ldr	r3, [pc, #280]	; (8000734 <fsm_manual_mode+0x2b0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fa14 	bl	8001a4c <setTimer3>
        		 setTimer4(time_led_yellow_2);
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <fsm_manual_mode+0x2b0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fa2b 	bl	8001a84 <setTimer4>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_GREEN_2 => AUTO_YELLOW_2)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 800062e:	2003      	movs	r0, #3
 8000630:	f000 fbf8 	bl	8000e24 <is_button_pressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d011      	beq.n	800065e <fsm_manual_mode+0x1da>
        	 {
        		 status_light=AUTO_YELLOW_2; //(RED in traffic light 1 on, YELLOW in traffic light 2 on)
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <fsm_manual_mode+0x29c>)
 800063c:	2204      	movs	r2, #4
 800063e:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_yellow_2);
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <fsm_manual_mode+0x2b0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f001 faa9 	bl	8001b9c <setTimer9>
        		 setTimer3(time_led_yellow_2);
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <fsm_manual_mode+0x2b0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f9fc 	bl	8001a4c <setTimer3>
        		 setTimer4(time_led_yellow_2);
 8000654:	4b37      	ldr	r3, [pc, #220]	; (8000734 <fsm_manual_mode+0x2b0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fa13 	bl	8001a84 <setTimer4>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(3))  // button 1 is holded 1s.
 800065e:	2003      	movs	r0, #3
 8000660:	f000 fc00 	bl	8000e64 <is_button_pressed_1s>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d054      	beq.n	8000714 <fsm_manual_mode+0x290>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <fsm_manual_mode+0x29c>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
// 				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
//				//setTimer3(TUNING_TIME);  //10000
//				setTimer8(12);
// 			}

        	 break;
 8000670:	e050      	b.n	8000714 <fsm_manual_mode+0x290>

        case MAN_YELLOW_2:
        	// Traffic light 1 is RED and traffic light 2 is YELLOW.
       	     ToggleLEDRed(0);
 8000672:	2000      	movs	r0, #0
 8000674:	f000 fc16 	bl	8000ea4 <ToggleLEDRed>
        	 ToggleLEDYellow(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 fc53 	bl	8000f24 <ToggleLEDYellow>
      //  	 sendDATA();

        	// TODO: Implementation fsm_button for CHANGE MODE In MAN_GREEN_1.
        	 if(is_button_pressed(1))  // button 1 is Pressed.
 800067e:	2001      	movs	r0, #1
 8000680:	f000 fbd0 	bl	8000e24 <is_button_pressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <fsm_manual_mode+0x214>
        	 {
        		 setTimer9(TIME_MANUAL_MODE);  // 10s
 800068a:	f242 7010 	movw	r0, #10000	; 0x2710
 800068e:	f001 fa85 	bl	8001b9c <setTimer9>
        		 status_light=MAN_GREEN_1;
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <fsm_manual_mode+0x29c>)
 8000694:	2205      	movs	r2, #5
 8000696:	601a      	str	r2, [r3, #0]
        	 }
        	 // TODO: Implementation if no buttion is pressed in 10s.
        	 if(timer9_flag==1)
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <fsm_manual_mode+0x2a0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d111      	bne.n	80006c4 <fsm_manual_mode+0x240>
        	 {
        		 status_light=AUTO_GREEN_1; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <fsm_manual_mode+0x29c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_green_1);
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <fsm_manual_mode+0x2b4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fa76 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_red_2);
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <fsm_manual_mode+0x2b8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f9e5 	bl	8001a84 <setTimer4>
        		 setTimer3(time_led_green_1);
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <fsm_manual_mode+0x2b4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9c4 	bl	8001a4c <setTimer3>
        	 }
        	 // TODO: Implementation function , if button 3 is pressed, system will change state (MAN_YELLOW_2 => AUTO_GREEN_1)
        	 if(is_button_pressed(3))  // button 1 is Pressed.
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 fbad 	bl	8000e24 <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d011      	beq.n	80006f4 <fsm_manual_mode+0x270>
        	 {
        		 status_light=AUTO_GREEN_1; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <fsm_manual_mode+0x29c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
        		 setTimer9(time_led_green_1);
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <fsm_manual_mode+0x2b4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fa5e 	bl	8001b9c <setTimer9>
        		 setTimer4(time_led_red_2);
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <fsm_manual_mode+0x2b8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f9cd 	bl	8001a84 <setTimer4>
        		 setTimer3(time_led_green_1);
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <fsm_manual_mode+0x2b4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f9ac 	bl	8001a4c <setTimer3>
        	 }
        	 //TODO: Implementation function, if button 3 is holded 1s, system will changea all state MANUAL => AUTO_INIT.
        	 if(is_button_pressed_1s(3))  // button 1 is holded 1s.
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 fbb5 	bl	8000e64 <is_button_pressed_1s>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00b      	beq.n	8000718 <fsm_manual_mode+0x294>
        	 {
        		 status_light=AUTO_INIT; //(GREEN in traffic light 1 on, RED in traffic light 2 on)
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fsm_manual_mode+0x29c>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
//  				status_pedes=PEDES_OUTOFSTATE;               // tat pedes_light and buzzer neu co.
// 				//setTimer3(TUNING_TIME);  //10000
// 				setTimer8(12);
//  			}

        	 break;
 8000706:	e007      	b.n	8000718 <fsm_manual_mode+0x294>
        default:
        	break;
 8000708:	bf00      	nop
 800070a:	e006      	b.n	800071a <fsm_manual_mode+0x296>
        	 break;
 800070c:	bf00      	nop
 800070e:	e004      	b.n	800071a <fsm_manual_mode+0x296>
        	 break;
 8000710:	bf00      	nop
 8000712:	e002      	b.n	800071a <fsm_manual_mode+0x296>
        	 break;
 8000714:	bf00      	nop
 8000716:	e000      	b.n	800071a <fsm_manual_mode+0x296>
        	 break;
 8000718:	bf00      	nop
     }
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000ec 	.word	0x200000ec
 8000724:	2000015c 	.word	0x2000015c
 8000728:	2000000c 	.word	0x2000000c
 800072c:	20000008 	.word	0x20000008
 8000730:	2000001c 	.word	0x2000001c
 8000734:	20000018 	.word	0x20000018
 8000738:	20000010 	.word	0x20000010
 800073c:	20000014 	.word	0x20000014

08000740 <fsm_pedes_mode>:
//		break;
//	}
//
//}
void fsm_pedes_mode()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

	// Pedestrian light is located in traffic light 2
	switch(status_pedes)
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <fsm_pedes_mode+0xa8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b09      	cmp	r3, #9
 800074a:	d01e      	beq.n	800078a <fsm_pedes_mode+0x4a>
 800074c:	2b0a      	cmp	r3, #10
 800074e:	d137      	bne.n	80007c0 <fsm_pedes_mode+0x80>
	{
	   case PEDES_GO:
		   ToggleLEDPedestrian(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fc67 	bl	8001024 <ToggleLEDPedestrian>
		   Buzzer_RUN();
 8000756:	f000 fa17 	bl	8000b88 <Buzzer_RUN>
		  * Nguoi di bo se duoc di khi den giao thong la den do.
		  * Traffic Light 1: LED GREEN/YELLOW ON.
		  * Traffic Light 2: LED RED ON.
		  * */
		   // TODO: implementation function to turn off pedestrian light.
		   if(timer1_flag==1)  // count to exit pedes mode.
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <fsm_pedes_mode+0xac>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d103      	bne.n	800076a <fsm_pedes_mode+0x2a>
		   {
			   status_pedes=PEDES_OUTOFSTATE;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <fsm_pedes_mode+0xa8>)
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	601a      	str	r2, [r3, #0]
//			   ToggleLEDPedestrian(2);  // default state.
//			   time_buzzer=0;
//			   time_frequency=0;
//			   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		   }
		  if(status_light==AUTO_GREEN_2||status_light==AUTO_YELLOW_2)
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <fsm_pedes_mode+0xb0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d003      	beq.n	800077a <fsm_pedes_mode+0x3a>
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <fsm_pedes_mode+0xb0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b04      	cmp	r3, #4
 8000778:	d130      	bne.n	80007dc <fsm_pedes_mode+0x9c>
			  /*
			   * AUTO_GREEN_2: RED1 ON, GREEN 2 ON.
			   * AUTO_YELLOW_2: RED1 ON, YELLOW 2 ON.
			   * Pedes light in traffic light 2 => pedestrian can't through road
			   */
			  status_pedes=PEDES_STOP;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <fsm_pedes_mode+0xa8>)
 800077c:	2209      	movs	r2, #9
 800077e:	601a      	str	r2, [r3, #0]
			   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <fsm_pedes_mode+0xb4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
		  }
	   break;
 8000788:	e028      	b.n	80007dc <fsm_pedes_mode+0x9c>


	   case PEDES_STOP:
		   ToggleLEDPedestrian(0); // LED RED ON
 800078a:	2000      	movs	r0, #0
 800078c:	f000 fc4a 	bl	8001024 <ToggleLEDPedestrian>
		  if(status_light==AUTO_GREEN_1||status_light==AUTO_YELLOW_1)
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <fsm_pedes_mode+0xb0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d003      	beq.n	80007a0 <fsm_pedes_mode+0x60>
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <fsm_pedes_mode+0xb0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d106      	bne.n	80007ae <fsm_pedes_mode+0x6e>
				  /*
				   * AUTO_GREEN_1: GREEN1 ON, RED 2 ON.
				   * AUTO_YELLOW_1: YELLOW1 ON, RED 2 ON.
				   *  Pedes light in traffic light 2 => pedestrian can through road.
				   */
			    status_pedes=PEDES_GO;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <fsm_pedes_mode+0xa8>)
 80007a2:	220a      	movs	r2, #10
 80007a4:	601a      	str	r2, [r3, #0]
			    setTimer5(BUZZER_DUTY_CYCLE);  // counter to turn on buzzer.
 80007a6:	f240 5014 	movw	r0, #1300	; 0x514
 80007aa:	f001 f987 	bl	8001abc <setTimer5>
			  }
		   // TODO: implementation function to turn off pedestrian light and out pedes mode.
		   if(timer1_flag==1)
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <fsm_pedes_mode+0xac>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d114      	bne.n	80007e0 <fsm_pedes_mode+0xa0>
		   {
			   status_pedes=PEDES_OUTOFSTATE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <fsm_pedes_mode+0xa8>)
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	601a      	str	r2, [r3, #0]
//			   time_buzzer=0;
//			   __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
		   }
		   // TODO: Implementation for function of fsm_button to out pedes mode.

	   break;
 80007be:	e00f      	b.n	80007e0 <fsm_pedes_mode+0xa0>

	   default:
		   //status_pedes=-1; // PEDES_OUTOFSTATE
		   ToggleLEDPedestrian(2);  // default state.
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fc2f 	bl	8001024 <ToggleLEDPedestrian>
		   time_buzzer=0;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <fsm_pedes_mode+0xb8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
		   time_frequency=0;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <fsm_pedes_mode+0xbc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
		   __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <fsm_pedes_mode+0xb4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
	   break;
 80007da:	e002      	b.n	80007e2 <fsm_pedes_mode+0xa2>
	   break;
 80007dc:	bf00      	nop
 80007de:	e000      	b.n	80007e2 <fsm_pedes_mode+0xa2>
	   break;
 80007e0:	bf00      	nop
	}
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000004 	.word	0x20000004
 80007ec:	2000011c 	.word	0x2000011c
 80007f0:	200000ec 	.word	0x200000ec
 80007f4:	2000016c 	.word	0x2000016c
 80007f8:	200000f0 	.word	0x200000f0
 80007fc:	200000f4 	.word	0x200000f4

08000800 <fsm_tunning_mode>:
 *      Author: Hoang Tri
 */

#include "FSM_SETTINGMODE.h"
void fsm_tunning_mode()
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	 *  Inscrese value of led.
	 *  Descrease value of led.
	 *  change tunning mode.
	 *  Out tuning mode to AUTO_INIT state.
	 * */
     switch(status_light)
 8000804:	4b81      	ldr	r3, [pc, #516]	; (8000a0c <fsm_tunning_mode+0x20c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b0d      	cmp	r3, #13
 800080a:	d058      	beq.n	80008be <fsm_tunning_mode+0xbe>
 800080c:	2b0d      	cmp	r3, #13
 800080e:	f300 80f4 	bgt.w	80009fa <fsm_tunning_mode+0x1fa>
 8000812:	2b0b      	cmp	r3, #11
 8000814:	d003      	beq.n	800081e <fsm_tunning_mode+0x1e>
 8000816:	2b0c      	cmp	r3, #12
 8000818:	f000 80a0 	beq.w	800095c <fsm_tunning_mode+0x15c>
             }

            break;

         default:
        	 break;
 800081c:	e0ed      	b.n	80009fa <fsm_tunning_mode+0x1fa>
              if(is_button_pressed_1s(2))
 800081e:	2002      	movs	r0, #2
 8000820:	f000 fb20 	bl	8000e64 <is_button_pressed_1s>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d007      	beq.n	800083a <fsm_tunning_mode+0x3a>
            	  time_led_red_1=time_led_red_1+1000;  // 10s => 11s
 800082a:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <fsm_tunning_mode+0x210>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000832:	4a77      	ldr	r2, [pc, #476]	; (8000a10 <fsm_tunning_mode+0x210>)
 8000834:	6013      	str	r3, [r2, #0]
            	  sendVALUE_SETTING();
 8000836:	f000 f96b 	bl	8000b10 <sendVALUE_SETTING>
              if(is_button_pressed_1s(3))
 800083a:	2003      	movs	r0, #3
 800083c:	f000 fb12 	bl	8000e64 <is_button_pressed_1s>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d007      	beq.n	8000856 <fsm_tunning_mode+0x56>
            	  time_led_red_1=time_led_red_1-1000;
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <fsm_tunning_mode+0x210>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800084e:	4a70      	ldr	r2, [pc, #448]	; (8000a10 <fsm_tunning_mode+0x210>)
 8000850:	6013      	str	r3, [r2, #0]
            	  sendVALUE_SETTING();
 8000852:	f000 f95d 	bl	8000b10 <sendVALUE_SETTING>
              time_led_red_2=time_led_red_1;
 8000856:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <fsm_tunning_mode+0x210>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a6e      	ldr	r2, [pc, #440]	; (8000a14 <fsm_tunning_mode+0x214>)
 800085c:	6013      	str	r3, [r2, #0]
              if(timer8_flag==1)
 800085e:	4b6e      	ldr	r3, [pc, #440]	; (8000a18 <fsm_tunning_mode+0x218>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10d      	bne.n	8000882 <fsm_tunning_mode+0x82>
            	  ToggleLEDRed(0);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fb1c 	bl	8000ea4 <ToggleLEDRed>
            	  ToggleLEDRed(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fb19 	bl	8000ea4 <ToggleLEDRed>
            	  setTimer7(500); //0.5s
 8000872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000876:	f001 f959 	bl	8001b2c <setTimer7>
            	  setTimer8(1000);//1s
 800087a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087e:	f001 f971 	bl	8001b64 <setTimer8>
              if(timer7_flag==1)
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <fsm_tunning_mode+0x21c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <fsm_tunning_mode+0x90>
            	  ToggleLEDRed(2);  // default case
 800088a:	2002      	movs	r0, #2
 800088c:	f000 fb0a 	bl	8000ea4 <ToggleLEDRed>
              if(is_button_pressed(1))
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fac7 	bl	8000e24 <is_button_pressed>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <fsm_tunning_mode+0xa8>
            	  status_light=SETTING_LED_GREEN;
 800089c:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <fsm_tunning_mode+0x20c>)
 800089e:	220d      	movs	r2, #13
 80008a0:	601a      	str	r2, [r3, #0]
            	  setTimer8(12);
 80008a2:	200c      	movs	r0, #12
 80008a4:	f001 f95e 	bl	8001b64 <setTimer8>
              if(is_button_pressed(3))
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 fabb 	bl	8000e24 <is_button_pressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f000 80a4 	beq.w	80009fe <fsm_tunning_mode+0x1fe>
            	  status_light=AUTO_INIT;
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <fsm_tunning_mode+0x20c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
         break;
 80008bc:	e09f      	b.n	80009fe <fsm_tunning_mode+0x1fe>
             if(is_button_pressed_1s(2))
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 fad0 	bl	8000e64 <is_button_pressed_1s>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d007      	beq.n	80008da <fsm_tunning_mode+0xda>
           	  time_led_green_1=time_led_green_1+1000;
 80008ca:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <fsm_tunning_mode+0x220>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80008d2:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <fsm_tunning_mode+0x220>)
 80008d4:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 80008d6:	f000 f91b 	bl	8000b10 <sendVALUE_SETTING>
             if(is_button_pressed_1s(3))
 80008da:	2003      	movs	r0, #3
 80008dc:	f000 fac2 	bl	8000e64 <is_button_pressed_1s>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d007      	beq.n	80008f6 <fsm_tunning_mode+0xf6>
           	  time_led_green_1=time_led_green_1-1000;
 80008e6:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <fsm_tunning_mode+0x220>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80008ee:	4a4c      	ldr	r2, [pc, #304]	; (8000a20 <fsm_tunning_mode+0x220>)
 80008f0:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 80008f2:	f000 f90d 	bl	8000b10 <sendVALUE_SETTING>
             time_led_green_2=time_led_green_1;
 80008f6:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <fsm_tunning_mode+0x220>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a4a      	ldr	r2, [pc, #296]	; (8000a24 <fsm_tunning_mode+0x224>)
 80008fc:	6013      	str	r3, [r2, #0]
             if(timer8_flag==1)
 80008fe:	4b46      	ldr	r3, [pc, #280]	; (8000a18 <fsm_tunning_mode+0x218>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10d      	bne.n	8000922 <fsm_tunning_mode+0x122>
           	  ToggleLEDGreen(0);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fb4c 	bl	8000fa4 <ToggleLEDGreen>
           	  ToggleLEDGreen(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fb49 	bl	8000fa4 <ToggleLEDGreen>
           	  setTimer7(500); //0.5s
 8000912:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000916:	f001 f909 	bl	8001b2c <setTimer7>
           	  setTimer8(1000);//1s
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f001 f921 	bl	8001b64 <setTimer8>
             if(timer7_flag==1)
 8000922:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <fsm_tunning_mode+0x21c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d102      	bne.n	8000930 <fsm_tunning_mode+0x130>
           	  ToggleLEDGreen(2);  // default case
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fb3a 	bl	8000fa4 <ToggleLEDGreen>
             if(is_button_pressed(1))
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fa77 	bl	8000e24 <is_button_pressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <fsm_tunning_mode+0x148>
           	  status_light=SETTING_LED_YELLOW;
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <fsm_tunning_mode+0x20c>)
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
           	  setTimer8(12);
 8000942:	200c      	movs	r0, #12
 8000944:	f001 f90e 	bl	8001b64 <setTimer8>
             if(is_button_pressed(3))
 8000948:	2003      	movs	r0, #3
 800094a:	f000 fa6b 	bl	8000e24 <is_button_pressed>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d056      	beq.n	8000a02 <fsm_tunning_mode+0x202>
           	  status_light=AUTO_INIT;
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <fsm_tunning_mode+0x20c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
         break;
 800095a:	e052      	b.n	8000a02 <fsm_tunning_mode+0x202>
             if(is_button_pressed_1s(2))
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fa81 	bl	8000e64 <is_button_pressed_1s>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d007      	beq.n	8000978 <fsm_tunning_mode+0x178>
           	  time_led_yellow_1=time_led_yellow_1+1000;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <fsm_tunning_mode+0x228>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000970:	4a2d      	ldr	r2, [pc, #180]	; (8000a28 <fsm_tunning_mode+0x228>)
 8000972:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000974:	f000 f8cc 	bl	8000b10 <sendVALUE_SETTING>
             if(is_button_pressed_1s(3))
 8000978:	2003      	movs	r0, #3
 800097a:	f000 fa73 	bl	8000e64 <is_button_pressed_1s>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d007      	beq.n	8000994 <fsm_tunning_mode+0x194>
           	  time_led_yellow_1=time_led_yellow_1-1000;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <fsm_tunning_mode+0x228>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <fsm_tunning_mode+0x228>)
 800098e:	6013      	str	r3, [r2, #0]
           	  sendVALUE_SETTING();
 8000990:	f000 f8be 	bl	8000b10 <sendVALUE_SETTING>
             time_led_yellow_2=time_led_yellow_1;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <fsm_tunning_mode+0x228>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <fsm_tunning_mode+0x22c>)
 800099a:	6013      	str	r3, [r2, #0]
             if(timer8_flag==1)
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <fsm_tunning_mode+0x218>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10d      	bne.n	80009c0 <fsm_tunning_mode+0x1c0>
           	  ToggleLEDYellow(0);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fabd 	bl	8000f24 <ToggleLEDYellow>
           	  ToggleLEDYellow(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 faba 	bl	8000f24 <ToggleLEDYellow>
           	  setTimer7(500); //0.5s
 80009b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b4:	f001 f8ba 	bl	8001b2c <setTimer7>
           	  setTimer8(1000);//1s
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f001 f8d2 	bl	8001b64 <setTimer8>
             if(timer7_flag==1)
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <fsm_tunning_mode+0x21c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d102      	bne.n	80009ce <fsm_tunning_mode+0x1ce>
           	  ToggleLEDYellow(2);  // default case
 80009c8:	2002      	movs	r0, #2
 80009ca:	f000 faab 	bl	8000f24 <ToggleLEDYellow>
             if(is_button_pressed(1))
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fa28 	bl	8000e24 <is_button_pressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <fsm_tunning_mode+0x1e6>
           	  status_light=SETTING_LED_RED;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <fsm_tunning_mode+0x20c>)
 80009dc:	220b      	movs	r2, #11
 80009de:	601a      	str	r2, [r3, #0]
           	  setTimer8(12);
 80009e0:	200c      	movs	r0, #12
 80009e2:	f001 f8bf 	bl	8001b64 <setTimer8>
             if(is_button_pressed(3))
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 fa1c 	bl	8000e24 <is_button_pressed>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d009      	beq.n	8000a06 <fsm_tunning_mode+0x206>
           	  status_light=AUTO_INIT;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <fsm_tunning_mode+0x20c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
            break;
 80009f8:	e005      	b.n	8000a06 <fsm_tunning_mode+0x206>
        	 break;
 80009fa:	bf00      	nop
 80009fc:	e004      	b.n	8000a08 <fsm_tunning_mode+0x208>
         break;
 80009fe:	bf00      	nop
 8000a00:	e002      	b.n	8000a08 <fsm_tunning_mode+0x208>
         break;
 8000a02:	bf00      	nop
 8000a04:	e000      	b.n	8000a08 <fsm_tunning_mode+0x208>
            break;
 8000a06:	bf00      	nop
     }
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000014 	.word	0x20000014
 8000a18:	20000154 	.word	0x20000154
 8000a1c:	2000014c 	.word	0x2000014c
 8000a20:	20000010 	.word	0x20000010
 8000a24:	2000001c 	.word	0x2000001c
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	20000018 	.word	0x20000018

08000a30 <sendDATA>:
 *
 *  Created on: Dec 13, 2022
 *      Author: Hoang Tri
 */
#include "UART_Communication.h"
void sendDATA(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	if(timer2_flag)
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <sendDATA+0xb0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d04f      	beq.n	8000adc <sendDATA+0xac>
	{
			if(!timer3_flag)
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <sendDATA+0xb4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d115      	bne.n	8000a70 <sendDATA+0x40>
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:%d:LIGHT1#\r\n", timer3_counter/100), 1000);
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <sendDATA+0xb8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a28      	ldr	r2, [pc, #160]	; (8000aec <sendDATA+0xbc>)
 8000a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4e:	1152      	asrs	r2, r2, #5
 8000a50:	17db      	asrs	r3, r3, #31
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4926      	ldr	r1, [pc, #152]	; (8000af0 <sendDATA+0xc0>)
 8000a58:	4826      	ldr	r0, [pc, #152]	; (8000af4 <sendDATA+0xc4>)
 8000a5a:	f003 ff57 	bl	800490c <siprintf>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	4923      	ldr	r1, [pc, #140]	; (8000af4 <sendDATA+0xc4>)
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <sendDATA+0xc8>)
 8000a6a:	f003 fa92 	bl	8003f92 <HAL_UART_Transmit>
 8000a6e:	e00b      	b.n	8000a88 <sendDATA+0x58>
			}
			else
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:WAIT:TFLIGHT1#\r\n"), 1000);
 8000a70:	4922      	ldr	r1, [pc, #136]	; (8000afc <sendDATA+0xcc>)
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <sendDATA+0xc4>)
 8000a74:	f003 ff4a 	bl	800490c <siprintf>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a80:	491c      	ldr	r1, [pc, #112]	; (8000af4 <sendDATA+0xc4>)
 8000a82:	481d      	ldr	r0, [pc, #116]	; (8000af8 <sendDATA+0xc8>)
 8000a84:	f003 fa85 	bl	8003f92 <HAL_UART_Transmit>
			}

			if(!timer4_flag)
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <sendDATA+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d115      	bne.n	8000abc <sendDATA+0x8c>
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:%d:LIGHT2#\r\n", timer4_counter/100), 1000);
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <sendDATA+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a15      	ldr	r2, [pc, #84]	; (8000aec <sendDATA+0xbc>)
 8000a96:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9a:	1152      	asrs	r2, r2, #5
 8000a9c:	17db      	asrs	r3, r3, #31
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4919      	ldr	r1, [pc, #100]	; (8000b08 <sendDATA+0xd8>)
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <sendDATA+0xc4>)
 8000aa6:	f003 ff31 	bl	800490c <siprintf>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	4910      	ldr	r1, [pc, #64]	; (8000af4 <sendDATA+0xc4>)
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <sendDATA+0xc8>)
 8000ab6:	f003 fa6c 	bl	8003f92 <HAL_UART_Transmit>
 8000aba:	e00b      	b.n	8000ad4 <sendDATA+0xa4>
			}
			else
			{
				HAL_UART_Transmit(&huart2,(void *)buffer_TX, sprintf (buffer_TX,"!7SEG:WAIT:TFLIGHT2#\r\n"), 1000);
 8000abc:	4913      	ldr	r1, [pc, #76]	; (8000b0c <sendDATA+0xdc>)
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <sendDATA+0xc4>)
 8000ac0:	f003 ff24 	bl	800490c <siprintf>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	4909      	ldr	r1, [pc, #36]	; (8000af4 <sendDATA+0xc4>)
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <sendDATA+0xc8>)
 8000ad0:	f003 fa5f 	bl	8003f92 <HAL_UART_Transmit>
			}
			setTimer2(1000);  // 1s send data;
 8000ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad8:	f000 ff9c 	bl	8001a14 <setTimer2>
		}
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000124 	.word	0x20000124
 8000ae4:	2000012c 	.word	0x2000012c
 8000ae8:	20000128 	.word	0x20000128
 8000aec:	51eb851f 	.word	0x51eb851f
 8000af0:	08005198 	.word	0x08005198
 8000af4:	200000f8 	.word	0x200000f8
 8000af8:	200001fc 	.word	0x200001fc
 8000afc:	080051ac 	.word	0x080051ac
 8000b00:	20000134 	.word	0x20000134
 8000b04:	20000130 	.word	0x20000130
 8000b08:	080051c4 	.word	0x080051c4
 8000b0c:	080051d8 	.word	0x080051d8

08000b10 <sendVALUE_SETTING>:

void sendVALUE_SETTING()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af02      	add	r7, sp, #8
	HAL_UART_Transmit(&huart2, (void *)buffer_TX, sprintf (buffer_TX,"!RED:%d:YELLOW:%d:GREEN:%d#\r\n", time_led_red_1/1000, time_led_yellow_1/1000, time_led_green_1/1000), 1000);
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <sendVALUE_SETTING+0x5c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <sendVALUE_SETTING+0x60>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	1192      	asrs	r2, r2, #6
 8000b22:	17db      	asrs	r3, r3, #31
 8000b24:	1ad1      	subs	r1, r2, r3
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <sendVALUE_SETTING+0x64>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <sendVALUE_SETTING+0x60>)
 8000b2c:	fb82 0203 	smull	r0, r2, r2, r3
 8000b30:	1192      	asrs	r2, r2, #6
 8000b32:	17db      	asrs	r3, r3, #31
 8000b34:	1ad0      	subs	r0, r2, r3
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <sendVALUE_SETTING+0x68>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <sendVALUE_SETTING+0x60>)
 8000b3c:	fb82 c203 	smull	ip, r2, r2, r3
 8000b40:	1192      	asrs	r2, r2, #6
 8000b42:	17db      	asrs	r3, r3, #31
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	490b      	ldr	r1, [pc, #44]	; (8000b7c <sendVALUE_SETTING+0x6c>)
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <sendVALUE_SETTING+0x70>)
 8000b50:	f003 fedc 	bl	800490c <siprintf>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5c:	4908      	ldr	r1, [pc, #32]	; (8000b80 <sendVALUE_SETTING+0x70>)
 8000b5e:	4809      	ldr	r0, [pc, #36]	; (8000b84 <sendVALUE_SETTING+0x74>)
 8000b60:	f003 fa17 	bl	8003f92 <HAL_UART_Transmit>
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	10624dd3 	.word	0x10624dd3
 8000b74:	2000000c 	.word	0x2000000c
 8000b78:	20000010 	.word	0x20000010
 8000b7c:	080051f0 	.word	0x080051f0
 8000b80:	200000f8 	.word	0x200000f8
 8000b84:	200001fc 	.word	0x200001fc

08000b88 <Buzzer_RUN>:

void Buzzer_RUN(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	if(timer5_flag)
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <Buzzer_RUN+0xc0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d04e      	beq.n	8000c32 <Buzzer_RUN+0xaa>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, time_frequency);
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <Buzzer_RUN+0xc8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
		setTimer6(time_buzzer/2);
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	0fda      	lsrs	r2, r3, #31
 8000ba4:	4413      	add	r3, r2
 8000ba6:	105b      	asrs	r3, r3, #1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 ffa3 	bl	8001af4 <setTimer6>
		if(timer4_counter<300)  // led pedestrian is located at traffic light 2.
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <Buzzer_RUN+0xd0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bb6:	da1d      	bge.n	8000bf4 <Buzzer_RUN+0x6c>
		{
			time_frequency *= 3;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000bc4:	6013      	str	r3, [r2, #0]
			time_buzzer = (timer4_counter>0)? timer4_counter/6 : time_buzzer/5;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <Buzzer_RUN+0xd0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dd07      	ble.n	8000bde <Buzzer_RUN+0x56>
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <Buzzer_RUN+0xd0>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <Buzzer_RUN+0xd4>)
 8000bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd8:	17db      	asrs	r3, r3, #31
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	e007      	b.n	8000bee <Buzzer_RUN+0x66>
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <Buzzer_RUN+0xd8>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1052      	asrs	r2, r2, #1
 8000bea:	17db      	asrs	r3, r3, #31
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e009      	b.n	8000c08 <Buzzer_RUN+0x80>
		}
		else
		{
		    time_frequency = time_frequency+100;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3364      	adds	r3, #100	; 0x64
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000bfc:	6013      	str	r3, [r2, #0]
			time_buzzer = time_buzzer- 100;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b64      	subs	r3, #100	; 0x64
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000c06:	6013      	str	r3, [r2, #0]
		}


		if(time_frequency >= 1000) time_frequency = 1000;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c10:	db03      	blt.n	8000c1a <Buzzer_RUN+0x92>
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <Buzzer_RUN+0xc4>)
 8000c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c18:	601a      	str	r2, [r3, #0]
		if(time_buzzer <= 100)	time_buzzer = 100;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b64      	cmp	r3, #100	; 0x64
 8000c20:	dc02      	bgt.n	8000c28 <Buzzer_RUN+0xa0>
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	601a      	str	r2, [r3, #0]
		setTimer5(time_buzzer);
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <Buzzer_RUN+0xcc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 ff45 	bl	8001abc <setTimer5>
	}
	if(timer6_flag)
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <Buzzer_RUN+0xdc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <Buzzer_RUN+0xba>
	{
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <Buzzer_RUN+0xc8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000013c 	.word	0x2000013c
 8000c4c:	200000f4 	.word	0x200000f4
 8000c50:	2000016c 	.word	0x2000016c
 8000c54:	200000f0 	.word	0x200000f0
 8000c58:	20000130 	.word	0x20000130
 8000c5c:	2aaaaaab 	.word	0x2aaaaaab
 8000c60:	66666667 	.word	0x66666667
 8000c64:	20000144 	.word	0x20000144

08000c68 <iKeyInput>:
static int flagForButtonPressed[NO_OF_BUTTONS] = 		{0,0,0,0};
static int flagForButtonPressed1s[NO_OF_BUTTONS]= 		{0,0,0,0};
static int counterForButtonPressed1s[NO_OF_BUTTONS]= 	{0,0,0,0};


GPIO_PinState iKeyInput(int index){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d822      	bhi.n	8000cbc <iKeyInput+0x54>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <iKeyInput+0x14>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000ca5 	.word	0x08000ca5
 8000c88:	08000cb1 	.word	0x08000cb1
	switch(index){
	case 0:  // Button of  Pedestrian Light
		return HAL_GPIO_ReadPin(Button_Pedes_GPIO_Port, Button_Pedes_Pin);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <iKeyInput+0x60>)
 8000c90:	f001 fd8a 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	e012      	b.n	8000cbe <iKeyInput+0x56>
	case 1:  // Button 1
		return HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8000c98:	2102      	movs	r1, #2
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <iKeyInput+0x60>)
 8000c9c:	f001 fd84 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	e00c      	b.n	8000cbe <iKeyInput+0x56>
	case 2:  // Button 2
		return HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <iKeyInput+0x60>)
 8000ca8:	f001 fd7e 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	e006      	b.n	8000cbe <iKeyInput+0x56>
	case 3:  // Button 3
		return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <iKeyInput+0x64>)
 8000cb4:	f001 fd78 	bl	80027a8 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	e000      	b.n	8000cbe <iKeyInput+0x56>
	default:
		return NORMAL_STATE;
 8000cbc:	2301      	movs	r3, #1
	}
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <subKeyProcess1>:

void subKeyProcess1(int index){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	flagForButtonPressed[index] = 1;
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <subKeyProcess1+0x1c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	200000b8 	.word	0x200000b8

08000cf0 <subKeyProcess2>:

void subKeyProcess2(int index){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	flagForButtonPressed1s[index] = 1;
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <subKeyProcess2+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	200000c8 	.word	0x200000c8

08000d10 <getKeyInput>:

void getKeyInput(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	e071      	b.n	8000e00 <getKeyInput+0xf0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000d1c:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <getKeyInput+0x100>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	7819      	ldrb	r1, [r3, #0]
 8000d24:	4a3b      	ldr	r2, [pc, #236]	; (8000e14 <getKeyInput+0x104>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer0[i];
 8000d2e:	4a3a      	ldr	r2, [pc, #232]	; (8000e18 <getKeyInput+0x108>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	7819      	ldrb	r1, [r3, #0]
 8000d36:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <getKeyInput+0x100>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer0[i] = iKeyInput(i);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff91 	bl	8000c68 <iKeyInput>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <getKeyInput+0x108>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	460a      	mov	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000d54:	4a2f      	ldr	r2, [pc, #188]	; (8000e14 <getKeyInput+0x104>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	492c      	ldr	r1, [pc, #176]	; (8000e10 <getKeyInput+0x100>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	440b      	add	r3, r1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d148      	bne.n	8000dfa <getKeyInput+0xea>
		   debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 8000d68:	4a2b      	ldr	r2, [pc, #172]	; (8000e18 <getKeyInput+0x108>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	4927      	ldr	r1, [pc, #156]	; (8000e10 <getKeyInput+0x100>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	440b      	add	r3, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
		if(debounceButtonBuffer2[i] == debounceButtonBuffer1[i] &&
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d13e      	bne.n	8000dfa <getKeyInput+0xea>
		{
			if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <getKeyInput+0x10c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	4923      	ldr	r1, [pc, #140]	; (8000e14 <getKeyInput+0x104>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	440b      	add	r3, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d017      	beq.n	8000dc0 <getKeyInput+0xb0>
				buttonBuffer[i] = debounceButtonBuffer2[i];
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <getKeyInput+0x104>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	7819      	ldrb	r1, [r3, #0]
 8000d98:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <getKeyInput+0x10c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	460a      	mov	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
				if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <getKeyInput+0x104>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d125      	bne.n	8000dfa <getKeyInput+0xea>
					subKeyProcess1(i);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff8e 	bl	8000cd0 <subKeyProcess1>
					counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <getKeyInput+0x110>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2164      	movs	r1, #100	; 0x64
 8000dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dbe:	e01c      	b.n	8000dfa <getKeyInput+0xea>
				}
			}else{
				counterForButtonPressed1s[i]--;
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <getKeyInput+0x110>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	4915      	ldr	r1, [pc, #84]	; (8000e20 <getKeyInput+0x110>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPressed1s[i] <= 0){
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <getKeyInput+0x110>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	dc0d      	bgt.n	8000dfa <getKeyInput+0xea>
					if(debounceButtonBuffer2[i]==PRESSED_STATE){
 8000dde:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <getKeyInput+0x104>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <getKeyInput+0xe0>
						subKeyProcess2(i);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff80 	bl	8000cf0 <subKeyProcess2>
					}
				counterForButtonPressed1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <getKeyInput+0x110>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2164      	movs	r1, #100	; 0x64
 8000df6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; ++i){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	dd8a      	ble.n	8000d1c <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200000ac 	.word	0x200000ac
 8000e14:	200000b0 	.word	0x200000b0
 8000e18:	200000b4 	.word	0x200000b4
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	200000d8 	.word	0x200000d8

08000e24 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char button_number){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d901      	bls.n	8000e38 <is_button_pressed+0x14>
 8000e34:	2300      	movs	r3, #0
 8000e36:	e00d      	b.n	8000e54 <is_button_pressed+0x30>
	else {
		if(flagForButtonPressed[button_number] == 1){
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <is_button_pressed+0x3c>)
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d106      	bne.n	8000e52 <is_button_pressed+0x2e>
			flagForButtonPressed[button_number] = 0;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <is_button_pressed+0x3c>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <is_button_pressed+0x30>
		}
		return 0;
 8000e52:	2300      	movs	r3, #0
	}
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000b8 	.word	0x200000b8

08000e64 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(unsigned char button_number){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	if(button_number >= NO_OF_BUTTONS) return 0xff;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d901      	bls.n	8000e78 <is_button_pressed_1s+0x14>
 8000e74:	23ff      	movs	r3, #255	; 0xff
 8000e76:	e00d      	b.n	8000e94 <is_button_pressed_1s+0x30>
	else {
		if(flagForButtonPressed1s[button_number] == 1){
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <is_button_pressed_1s+0x3c>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d106      	bne.n	8000e92 <is_button_pressed_1s+0x2e>
			flagForButtonPressed1s[button_number] = 0;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <is_button_pressed_1s+0x3c>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <is_button_pressed_1s+0x30>
		}
		return 0;
 8000e92:	2300      	movs	r3, #0
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200000c8 	.word	0x200000c8

08000ea4 <ToggleLEDRed>:
 * LED OFF: 0 0
 * We have assume if "light" = 0 => Traffic Light 1 and "Light"=1 => Traffic light 2.
 */
#include "displayallLED.h"
void ToggleLEDRed(int light)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED RED of Traffic Light 1 on
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <ToggleLEDRed+0x16>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d00c      	beq.n	8000ed2 <ToggleLEDRed+0x2e>
 8000eb8:	e016      	b.n	8000ee8 <ToggleLEDRed+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec0:	4816      	ldr	r0, [pc, #88]	; (8000f1c <ToggleLEDRed+0x78>)
 8000ec2:	f001 fc88 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000ecc:	f001 fc83 	bl	80027d6 <HAL_GPIO_WritePin>
	    	 break;
 8000ed0:	e020      	b.n	8000f14 <ToggleLEDRed+0x70>
	      case 1:  //if "light" = 1 => LED RED of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000ed8:	f001 fc7d 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2110      	movs	r1, #16
 8000ee0:	480f      	ldr	r0, [pc, #60]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000ee2:	f001 fc78 	bl	80027d6 <HAL_GPIO_WritePin>
	    	break;
 8000ee6:	e015      	b.n	8000f14 <ToggleLEDRed+0x70>
	      default:  // clear all led RED in 2 traffic light.
			  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <ToggleLEDRed+0x78>)
 8000ef0:	f001 fc71 	bl	80027d6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000efa:	f001 fc6c 	bl	80027d6 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000f04:	f001 fc67 	bl	80027d6 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <ToggleLEDRed+0x7c>)
 8000f0e:	f001 fc62 	bl	80027d6 <HAL_GPIO_WritePin>
			break;
 8000f12:	bf00      	nop
	}
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00

08000f24 <ToggleLEDYellow>:
void ToggleLEDYellow(int light)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED YELLOW of Traffic Light 1 on
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <ToggleLEDYellow+0x16>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d00c      	beq.n	8000f52 <ToggleLEDYellow+0x2e>
 8000f38:	e016      	b.n	8000f68 <ToggleLEDYellow+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4816      	ldr	r0, [pc, #88]	; (8000f9c <ToggleLEDYellow+0x78>)
 8000f42:	f001 fc48 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	2108      	movs	r1, #8
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f4c:	f001 fc43 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  break;
 8000f50:	e020      	b.n	8000f94 <ToggleLEDYellow+0x70>
	      case 1:  //if "light" = 1 => LED YELLOW of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2120      	movs	r1, #32
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f58:	f001 fc3d 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2110      	movs	r1, #16
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f62:	f001 fc38 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  break;
 8000f66:	e015      	b.n	8000f94 <ToggleLEDYellow+0x70>
	      default:  // clear all led YELLOW in 2 traffic light.
			  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <ToggleLEDYellow+0x78>)
 8000f70:	f001 fc31 	bl	80027d6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2108      	movs	r1, #8
 8000f78:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f7a:	f001 fc2c 	bl	80027d6 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f84:	f001 fc27 	bl	80027d6 <HAL_GPIO_WritePin>
		      HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <ToggleLEDYellow+0x7c>)
 8000f8e:	f001 fc22 	bl	80027d6 <HAL_GPIO_WritePin>
			  break;
 8000f92:	bf00      	nop
	}
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <ToggleLEDGreen>:
void ToggleLEDGreen(int light)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	switch(light)     //if "light" = 0 => LED YELLOW of Traffic Light 1 on
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <ToggleLEDGreen+0x16>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d00c      	beq.n	8000fd2 <ToggleLEDGreen+0x2e>
 8000fb8:	e016      	b.n	8000fe8 <ToggleLEDGreen+0x44>
	{
	      case 0:
	    	  HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <ToggleLEDGreen+0x78>)
 8000fc2:	f001 fc08 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_SET);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2108      	movs	r1, #8
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <ToggleLEDGreen+0x7c>)
 8000fcc:	f001 fc03 	bl	80027d6 <HAL_GPIO_WritePin>
	      break;
 8000fd0:	e020      	b.n	8001014 <ToggleLEDGreen+0x70>
	      case 1:  //if "light" = 1 => LED YELLOW of Traffic Light 2 on
	    	  HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4812      	ldr	r0, [pc, #72]	; (8001020 <ToggleLEDGreen+0x7c>)
 8000fd8:	f001 fbfd 	bl	80027d6 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2110      	movs	r1, #16
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <ToggleLEDGreen+0x7c>)
 8000fe2:	f001 fbf8 	bl	80027d6 <HAL_GPIO_WritePin>
	      break;
 8000fe6:	e015      	b.n	8001014 <ToggleLEDGreen+0x70>
	      default:  // clear all led YELLOW in 2 traffic light.
				HAL_GPIO_WritePin(D2_TFL1_GPIO_Port,D2_TFL1_Pin, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <ToggleLEDGreen+0x78>)
 8000ff0:	f001 fbf1 	bl	80027d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D3_TFL1_GPIO_Port,D3_TFL1_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <ToggleLEDGreen+0x7c>)
 8000ffa:	f001 fbec 	bl	80027d6 <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(D4_TFL2_GPIO_Port,D4_TFL2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2120      	movs	r1, #32
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <ToggleLEDGreen+0x7c>)
 8001004:	f001 fbe7 	bl	80027d6 <HAL_GPIO_WritePin>
		    	HAL_GPIO_WritePin(D5_TFL2_GPIO_Port,D5_TFL2_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2110      	movs	r1, #16
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <ToggleLEDGreen+0x7c>)
 800100e:	f001 fbe2 	bl	80027d6 <HAL_GPIO_WritePin>
		  break;
 8001012:	bf00      	nop
	}
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010800 	.word	0x40010800
 8001020:	40010c00 	.word	0x40010c00

08001024 <ToggleLEDPedestrian>:
void ToggleLEDPedestrian(int state)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 * state 0: khong cho nguoi di bo di.
 * state 1: cho nguoi di bo di.
 * LED RED: khong cho nguoi di bo di.
 * LED GREEN: cho nguoi di bo di qua duong.
 * */
	switch(state)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <ToggleLEDPedestrian+0x16>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d00d      	beq.n	8001054 <ToggleLEDPedestrian+0x30>
 8001038:	e019      	b.n	800106e <ToggleLEDPedestrian+0x4a>
	{
	    case 0:  // LED RED
	    HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_SET);  //1
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <ToggleLEDPedestrian+0x6c>)
 8001042:	f001 fbc8 	bl	80027d6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <ToggleLEDPedestrian+0x70>)
 800104e:	f001 fbc2 	bl	80027d6 <HAL_GPIO_WritePin>
	    break;  // LED GREEN
 8001052:	e019      	b.n	8001088 <ToggleLEDPedestrian+0x64>
	    case 1:
	    HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <ToggleLEDPedestrian+0x6c>)
 800105c:	f001 fbbb 	bl	80027d6 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_SET);  //1
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	480b      	ldr	r0, [pc, #44]	; (8001094 <ToggleLEDPedestrian+0x70>)
 8001068:	f001 fbb5 	bl	80027d6 <HAL_GPIO_WritePin>
	    break;
 800106c:	e00c      	b.n	8001088 <ToggleLEDPedestrian+0x64>
	    default:
		HAL_GPIO_WritePin(D6_Pedes_Light_GPIO_Port,D6_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <ToggleLEDPedestrian+0x6c>)
 8001076:	f001 fbae 	bl	80027d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_Pedes_Light_GPIO_Port,D7_Pedes_Light_Pin, GPIO_PIN_RESET);  //0
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <ToggleLEDPedestrian+0x70>)
 8001082:	f001 fba8 	bl	80027d6 <HAL_GPIO_WritePin>
		break;
 8001086:	bf00      	nop
	}

}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40010800 	.word	0x40010800

08001098 <clearLED>:
void clearLED(int index_light)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	/*
	 * Tat tat ca cac den LED
	 * index_light = 0  => Traffic light 1.
	 * index_light=1 => Traffic light 2.
	 *   */
	switch(index_light){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <clearLED+0x16>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00c      	beq.n	80010c6 <clearLED+0x2e>
 80010ac:	e016      	b.n	80010dc <clearLED+0x44>
		case 0:
			HAL_GPIO_WritePin(D2_TFL1_GPIO_Port, D2_TFL1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b4:	4816      	ldr	r0, [pc, #88]	; (8001110 <clearLED+0x78>)
 80010b6:	f001 fb8e 	bl	80027d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_TFL1_GPIO_Port, D3_TFL1_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2108      	movs	r1, #8
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <clearLED+0x7c>)
 80010c0:	f001 fb89 	bl	80027d6 <HAL_GPIO_WritePin>
			break;
 80010c4:	e020      	b.n	8001108 <clearLED+0x70>
		case 1:
            HAL_GPIO_WritePin(D4_TFL2_GPIO_Port, D4_TFL2_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <clearLED+0x7c>)
 80010cc:	f001 fb83 	bl	80027d6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_TFL2_GPIO_Port, D5_TFL2_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2110      	movs	r1, #16
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <clearLED+0x7c>)
 80010d6:	f001 fb7e 	bl	80027d6 <HAL_GPIO_WritePin>
			break;
 80010da:	e015      	b.n	8001108 <clearLED+0x70>
		default:
			HAL_GPIO_WritePin(D2_TFL1_GPIO_Port, D2_TFL1_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <clearLED+0x78>)
 80010e4:	f001 fb77 	bl	80027d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_TFL1_GPIO_Port, D3_TFL1_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2108      	movs	r1, #8
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <clearLED+0x7c>)
 80010ee:	f001 fb72 	bl	80027d6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D4_TFL2_GPIO_Port, D4_TFL2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <clearLED+0x7c>)
 80010f8:	f001 fb6d 	bl	80027d6 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D5_TFL2_GPIO_Port, D5_TFL2_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2110      	movs	r1, #16
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <clearLED+0x7c>)
 8001102:	f001 fb68 	bl	80027d6 <HAL_GPIO_WritePin>
			break;
 8001106:	bf00      	nop
	}
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111c:	f000 ffa0 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001120:	f000 f840 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001124:	f000 f96c 	bl	8001400 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001128:	f000 f87e 	bl	8001228 <MX_TIM2_Init>
  MX_TIM3_Init();
 800112c:	f000 f8c8 	bl	80012c0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001130:	f000 f93c 	bl	80013ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <main+0x6c>)
 8001136:	f001 ffd1 	bl	80030dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4812      	ldr	r0, [pc, #72]	; (8001188 <main+0x70>)
 800113e:	f002 f877 	bl	8003230 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(TimerRun,0,10);
 8001142:	220a      	movs	r2, #10
 8001144:	2100      	movs	r1, #0
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <main+0x74>)
 8001148:	f000 f9d8 	bl	80014fc <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 800114c:	220a      	movs	r2, #10
 800114e:	2100      	movs	r1, #0
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <main+0x78>)
 8001152:	f000 f9d3 	bl	80014fc <SCH_Add_Task>
  SCH_Add_Task(fsm_automode, 0, 10);
 8001156:	220a      	movs	r2, #10
 8001158:	2100      	movs	r1, #0
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <main+0x7c>)
 800115c:	f000 f9ce 	bl	80014fc <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_mode, 0, 10);
 8001160:	220a      	movs	r2, #10
 8001162:	2100      	movs	r1, #0
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <main+0x80>)
 8001166:	f000 f9c9 	bl	80014fc <SCH_Add_Task>
  SCH_Add_Task(fsm_tunning_mode, 0, 10);
 800116a:	220a      	movs	r2, #10
 800116c:	2100      	movs	r1, #0
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <main+0x84>)
 8001170:	f000 f9c4 	bl	80014fc <SCH_Add_Task>
  SCH_Add_Task(fsm_pedes_mode, 0, 10);
 8001174:	220a      	movs	r2, #10
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <main+0x88>)
 800117a:	f000 f9bf 	bl	80014fc <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 800117e:	f000 fc17 	bl	80019b0 <SCH_Dispatch_Tasks>
 8001182:	e7fc      	b.n	800117e <main+0x66>
 8001184:	200001b4 	.word	0x200001b4
 8001188:	2000016c 	.word	0x2000016c
 800118c:	08001bd5 	.word	0x08001bd5
 8001190:	08000d11 	.word	0x08000d11
 8001194:	0800014d 	.word	0x0800014d
 8001198:	08000485 	.word	0x08000485
 800119c:	08000801 	.word	0x08000801
 80011a0:	08000741 	.word	0x08000741

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	2228      	movs	r2, #40	; 0x28
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fba2 	bl	80048fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ca:	2301      	movs	r3, #1
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ce:	2310      	movs	r3, #16
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fb0f 	bl	8002808 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80011f0:	f000 f97e 	bl	80014f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	230f      	movs	r3, #15
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2302      	movs	r3, #2
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	2102      	movs	r1, #2
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fd7a 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800121a:	f000 f969 	bl	80014f0 <Error_Handler>
  }
}
 800121e:	bf00      	nop
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_TIM2_Init+0x94>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_TIM2_Init+0x94>)
 800124e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001252:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM2_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_TIM2_Init+0x94>)
 800125c:	224f      	movs	r2, #79	; 0x4f
 800125e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_TIM2_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM2_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <MX_TIM2_Init+0x94>)
 800126e:	f001 fee5 	bl	800303c <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001278:	f000 f93a 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_TIM2_Init+0x94>)
 800128a:	f002 fa39 	bl	8003700 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001294:	f000 f92c 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_TIM2_Init+0x94>)
 80012a6:	f002 fdb7 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012b0:	f000 f91e 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001b4 	.word	0x200001b4

080012c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	; 0x38
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 0320 	add.w	r3, r7, #32
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
 80012ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_TIM3_Init+0xe4>)
 80012f2:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <MX_TIM3_Init+0xe8>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <MX_TIM3_Init+0xe4>)
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_TIM3_Init+0xe4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001304:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <MX_TIM3_Init+0xe4>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001316:	4823      	ldr	r0, [pc, #140]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001318:	f001 fe90 	bl	800303c <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001322:	f000 f8e5 	bl	80014f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800132c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001330:	4619      	mov	r1, r3
 8001332:	481c      	ldr	r0, [pc, #112]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001334:	f002 f9e4 	bl	8003700 <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800133e:	f000 f8d7 	bl	80014f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001344:	f001 ff1c 	bl	8003180 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800134e:	f000 f8cf 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4619      	mov	r1, r3
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001362:	f002 fd59 	bl	8003e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800136c:	f000 f8c0 	bl	80014f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001370:	2360      	movs	r3, #96	; 0x60
 8001372:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001388:	f002 f8fc 	bl	8003584 <HAL_TIM_PWM_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001392:	f000 f8ad 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <MX_TIM3_Init+0xe4>)
 8001398:	f000 fd40 	bl	8001e1c <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3738      	adds	r7, #56	; 0x38
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000016c 	.word	0x2000016c
 80013a8:	40000400 	.word	0x40000400

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f002 fd88 	bl	8003ef8 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f87f 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001fc 	.word	0x200001fc
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <MX_GPIO_Init+0xd0>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <MX_GPIO_Init+0xd0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pedes_Light_Pin|D3_TFL1_Pin|D5_TFL2_Pin|D4_TFL2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800144a:	4822      	ldr	r0, [pc, #136]	; (80014d4 <MX_GPIO_Init+0xd4>)
 800144c:	f001 f9c3 	bl	80027d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pedes_Light_Pin|D2_TFL1_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001456:	4820      	ldr	r0, [pc, #128]	; (80014d8 <MX_GPIO_Init+0xd8>)
 8001458:	f001 f9bd 	bl	80027d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_Pedes_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button_Pedes_Pin|Button1_Pin|Button2_Pin;
 800145c:	2313      	movs	r3, #19
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	481a      	ldr	r0, [pc, #104]	; (80014d8 <MX_GPIO_Init+0xd8>)
 8001470:	f001 f816 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001474:	2301      	movs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_GPIO_Init+0xd4>)
 8001488:	f001 f80a 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pedes_Light_Pin D3_TFL1_Pin D5_TFL2_Pin D4_TFL2_Pin */
  GPIO_InitStruct.Pin = D6_Pedes_Light_Pin|D3_TFL1_Pin|D5_TFL2_Pin|D4_TFL2_Pin;
 800148c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <MX_GPIO_Init+0xd4>)
 80014a6:	f000 fffb 	bl	80024a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pedes_Light_Pin D2_TFL1_Pin */
  GPIO_InitStruct.Pin = D7_Pedes_Light_Pin|D2_TFL1_Pin;
 80014aa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_GPIO_Init+0xd8>)
 80014c4:	f000 ffec 	bl	80024a0 <HAL_GPIO_Init>

}
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40010800 	.word	0x40010800

080014dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80014e4:	f000 fa2c 	bl	8001940 <SCH_Update>
//	TimerRun();
//	fsm_automode();
//	fsm_manual_mode();
//	fsm_tunning_mode();
//	fsm_pedes_mode();
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <SCH_Add_Task>:
	clearLED(0);
	clearLED(1);

}

void SCH_Add_Task( void (*pFunction)() , uint32_t DELAY, uint32_t PERIOD){
 80014fc:	b4b0      	push	{r4, r5, r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]

	if(len<SCH_MAX_TASKS){
 8001508:	4b8f      	ldr	r3, [pc, #572]	; (8001748 <SCH_Add_Task+0x24c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b1d      	cmp	r3, #29
 800150e:	f300 81bd 	bgt.w	800188c <SCH_Add_Task+0x390>

        if(len == 0){
 8001512:	4b8d      	ldr	r3, [pc, #564]	; (8001748 <SCH_Add_Task+0x24c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <SCH_Add_Task+0x50>

            sTask[0].pTask = pFunction;
 800151a:	4a8c      	ldr	r2, [pc, #560]	; (800174c <SCH_Add_Task+0x250>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6013      	str	r3, [r2, #0]
            sTask[0].Delay = DELAY/TICK;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4a8b      	ldr	r2, [pc, #556]	; (8001750 <SCH_Add_Task+0x254>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	4a88      	ldr	r2, [pc, #544]	; (800174c <SCH_Add_Task+0x250>)
 800152c:	6053      	str	r3, [r2, #4]
            sTask[0].Period = PERIOD/TICK;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a87      	ldr	r2, [pc, #540]	; (8001750 <SCH_Add_Task+0x254>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	08db      	lsrs	r3, r3, #3
 8001538:	461a      	mov	r2, r3
 800153a:	4b84      	ldr	r3, [pc, #528]	; (800174c <SCH_Add_Task+0x250>)
 800153c:	609a      	str	r2, [r3, #8]
            sTask[0].RunMe = 0;
 800153e:	4b83      	ldr	r3, [pc, #524]	; (800174c <SCH_Add_Task+0x250>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]

            cur_index = 0;
 8001544:	4b83      	ldr	r3, [pc, #524]	; (8001754 <SCH_Add_Task+0x258>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e196      	b.n	800187a <SCH_Add_Task+0x37e>

        }else{
            //counter
            int i, j;

    	    if(DELAY >= sTask[cur_index].Delay){
 800154c:	4b81      	ldr	r3, [pc, #516]	; (8001754 <SCH_Add_Task+0x258>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	497e      	ldr	r1, [pc, #504]	; (800174c <SCH_Add_Task+0x250>)
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	f0c0 80ba 	bcc.w	80016dc <SCH_Add_Task+0x1e0>

                for(i=cur_index;i<tail && DELAY/TICK >= sTask[i].Delay;i+=1);
 8001568:	4b7a      	ldr	r3, [pc, #488]	; (8001754 <SCH_Add_Task+0x258>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e002      	b.n	8001576 <SCH_Add_Task+0x7a>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <SCH_Add_Task+0x25c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	da0f      	bge.n	80015a0 <SCH_Add_Task+0xa4>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4a73      	ldr	r2, [pc, #460]	; (8001750 <SCH_Add_Task+0x254>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	08d9      	lsrs	r1, r3, #3
 800158a:	4870      	ldr	r0, [pc, #448]	; (800174c <SCH_Add_Task+0x250>)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4403      	add	r3, r0
 8001598:	3304      	adds	r3, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4299      	cmp	r1, r3
 800159e:	d2e7      	bcs.n	8001570 <SCH_Add_Task+0x74>

                //new tail
                if( i==tail && DELAY >= sTask[i].Delay ){
 80015a0:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <SCH_Add_Task+0x25c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d144      	bne.n	8001634 <SCH_Add_Task+0x138>
 80015aa:	4968      	ldr	r1, [pc, #416]	; (800174c <SCH_Add_Task+0x250>)
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3304      	adds	r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d338      	bcc.n	8001634 <SCH_Add_Task+0x138>
                    sTask[i+1].pTask = pFunction;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	4961      	ldr	r1, [pc, #388]	; (800174c <SCH_Add_Task+0x250>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	601a      	str	r2, [r3, #0]
                    sTask[i+1].Delay = DELAY/TICK;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	495c      	ldr	r1, [pc, #368]	; (8001750 <SCH_Add_Task+0x254>)
 80015de:	fba1 1303 	umull	r1, r3, r1, r3
 80015e2:	08d9      	lsrs	r1, r3, #3
 80015e4:	4859      	ldr	r0, [pc, #356]	; (800174c <SCH_Add_Task+0x250>)
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	3304      	adds	r3, #4
 80015f2:	6019      	str	r1, [r3, #0]
                    sTask[i+1].Period = PERIOD/TICK;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a56      	ldr	r2, [pc, #344]	; (8001750 <SCH_Add_Task+0x254>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	08d9      	lsrs	r1, r3, #3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	4608      	mov	r0, r1
 8001604:	4951      	ldr	r1, [pc, #324]	; (800174c <SCH_Add_Task+0x250>)
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3308      	adds	r3, #8
 8001612:	6018      	str	r0, [r3, #0]
                    sTask[i+1].RunMe = 0;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	494c      	ldr	r1, [pc, #304]	; (800174c <SCH_Add_Task+0x250>)
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	330c      	adds	r3, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
                    cur_index = tail;
 800162a:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <SCH_Add_Task+0x25c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <SCH_Add_Task+0x258>)
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e122      	b.n	800187a <SCH_Add_Task+0x37e>

                }
                else{
                    for(j = len; j>i ; j-=1){
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <SCH_Add_Task+0x24c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	e017      	b.n	800166c <SCH_Add_Task+0x170>
                        sTask[j] = sTask[j-1];
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	4842      	ldr	r0, [pc, #264]	; (800174c <SCH_Add_Task+0x250>)
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4418      	add	r0, r3
 800164e:	493f      	ldr	r1, [pc, #252]	; (800174c <SCH_Add_Task+0x250>)
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	4604      	mov	r4, r0
 800165c:	461d      	mov	r5, r3
 800165e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i ; j-=1){
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	3b01      	subs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	dce3      	bgt.n	800163c <SCH_Add_Task+0x140>
                    }

                    sTask[i].pTask = pFunction;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <SCH_Add_Task+0x250>)
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4a31      	ldr	r2, [pc, #196]	; (8001750 <SCH_Add_Task+0x254>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	08d9      	lsrs	r1, r3, #3
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <SCH_Add_Task+0x250>)
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4403      	add	r3, r0
 800169e:	3304      	adds	r3, #4
 80016a0:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a2a      	ldr	r2, [pc, #168]	; (8001750 <SCH_Add_Task+0x254>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	4618      	mov	r0, r3
 80016ae:	4927      	ldr	r1, [pc, #156]	; (800174c <SCH_Add_Task+0x250>)
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3308      	adds	r3, #8
 80016be:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 80016c0:	4922      	ldr	r1, [pc, #136]	; (800174c <SCH_Add_Task+0x250>)
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	330c      	adds	r3, #12
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
                    cur_index = i;
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <SCH_Add_Task+0x258>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e0ce      	b.n	800187a <SCH_Add_Task+0x37e>
                }

    	    }else{
                // printf("dang");
    	        for(i=cur_index; i>head && DELAY/TICK < sTask[i].Delay; i-=1);
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <SCH_Add_Task+0x258>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e002      	b.n	80016ea <SCH_Add_Task+0x1ee>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <SCH_Add_Task+0x260>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dd0f      	ble.n	8001714 <SCH_Add_Task+0x218>
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <SCH_Add_Task+0x254>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	08d9      	lsrs	r1, r3, #3
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <SCH_Add_Task+0x250>)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	3304      	adds	r3, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4299      	cmp	r1, r3
 8001712:	d3e7      	bcc.n	80016e4 <SCH_Add_Task+0x1e8>

                //new head
                if( i==head && DELAY/TICK < sTask[i].Delay ){
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <SCH_Add_Task+0x260>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	429a      	cmp	r2, r3
 800171c:	d156      	bne.n	80017cc <SCH_Add_Task+0x2d0>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <SCH_Add_Task+0x254>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	08d9      	lsrs	r1, r3, #3
 8001728:	4808      	ldr	r0, [pc, #32]	; (800174c <SCH_Add_Task+0x250>)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4403      	add	r3, r0
 8001736:	3304      	adds	r3, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4299      	cmp	r1, r3
 800173c:	d246      	bcs.n	80017cc <SCH_Add_Task+0x2d0>

                    for(j = len; j>head ; j-=1){
 800173e:	4b02      	ldr	r3, [pc, #8]	; (8001748 <SCH_Add_Task+0x24c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	e024      	b.n	8001790 <SCH_Add_Task+0x294>
 8001746:	bf00      	nop
 8001748:	200004a4 	.word	0x200004a4
 800174c:	2000024c 	.word	0x2000024c
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	20000248 	.word	0x20000248
 8001758:	20000240 	.word	0x20000240
 800175c:	20000244 	.word	0x20000244
                        sTask[j] = sTask[j-1];
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1e5a      	subs	r2, r3, #1
 8001764:	484c      	ldr	r0, [pc, #304]	; (8001898 <SCH_Add_Task+0x39c>)
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4418      	add	r0, r3
 8001772:	4949      	ldr	r1, [pc, #292]	; (8001898 <SCH_Add_Task+0x39c>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	4604      	mov	r4, r0
 8001780:	461d      	mov	r5, r3
 8001782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	6023      	str	r3, [r4, #0]
                    for(j = len; j>head ; j-=1){
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	3b01      	subs	r3, #1
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <SCH_Add_Task+0x3a0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	dce2      	bgt.n	8001760 <SCH_Add_Task+0x264>
                    }

                    sTask[0].pTask = pFunction;
 800179a:	4a3f      	ldr	r2, [pc, #252]	; (8001898 <SCH_Add_Task+0x39c>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6013      	str	r3, [r2, #0]
                    sTask[0].Delay = DELAY/TICK;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <SCH_Add_Task+0x3a4>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <SCH_Add_Task+0x39c>)
 80017ac:	6053      	str	r3, [r2, #4]
                    sTask[0].Period = PERIOD/TICK;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <SCH_Add_Task+0x3a4>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <SCH_Add_Task+0x39c>)
 80017bc:	609a      	str	r2, [r3, #8]
                    sTask[0].RunMe = 0;
 80017be:	4b36      	ldr	r3, [pc, #216]	; (8001898 <SCH_Add_Task+0x39c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
                    cur_index = 0;
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <SCH_Add_Task+0x3a8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e056      	b.n	800187a <SCH_Add_Task+0x37e>
                }
                else{
                    for(j = len; j>i+1 ; j-=1){
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <SCH_Add_Task+0x3ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	e017      	b.n	8001804 <SCH_Add_Task+0x308>
                        sTask[j] = sTask[j-1];
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	482f      	ldr	r0, [pc, #188]	; (8001898 <SCH_Add_Task+0x39c>)
 80017da:	6939      	ldr	r1, [r7, #16]
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4418      	add	r0, r3
 80017e6:	492c      	ldr	r1, [pc, #176]	; (8001898 <SCH_Add_Task+0x39c>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	4604      	mov	r4, r0
 80017f4:	461d      	mov	r5, r3
 80017f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	6023      	str	r3, [r4, #0]
                    for(j = len; j>i+1 ; j-=1){
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3b01      	subs	r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	429a      	cmp	r2, r3
 800180c:	dce2      	bgt.n	80017d4 <SCH_Add_Task+0x2d8>
                    }

                    i += 1;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]

                    sTask[i].pTask = pFunction;
 8001814:	4920      	ldr	r1, [pc, #128]	; (8001898 <SCH_Add_Task+0x39c>)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	601a      	str	r2, [r3, #0]
                    sTask[i].Delay = DELAY/TICK;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <SCH_Add_Task+0x3a4>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	08d9      	lsrs	r1, r3, #3
 8001830:	4819      	ldr	r0, [pc, #100]	; (8001898 <SCH_Add_Task+0x39c>)
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4403      	add	r3, r0
 800183e:	3304      	adds	r3, #4
 8001840:	6019      	str	r1, [r3, #0]
                    sTask[i].Period = PERIOD/TICK;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <SCH_Add_Task+0x3a4>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	4618      	mov	r0, r3
 800184e:	4912      	ldr	r1, [pc, #72]	; (8001898 <SCH_Add_Task+0x39c>)
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	3308      	adds	r3, #8
 800185e:	6018      	str	r0, [r3, #0]
                    sTask[i].RunMe = 0;
 8001860:	490d      	ldr	r1, [pc, #52]	; (8001898 <SCH_Add_Task+0x39c>)
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	330c      	adds	r3, #12
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
                    cur_index =i;
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <SCH_Add_Task+0x3a8>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	6013      	str	r3, [r2, #0]
                }

    	    }
        }

        tail = len;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <SCH_Add_Task+0x3ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <SCH_Add_Task+0x3b0>)
 8001880:	6013      	str	r3, [r2, #0]
	    // Adding len
        len += 1;
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <SCH_Add_Task+0x3ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <SCH_Add_Task+0x3ac>)
 800188a:	6013      	str	r3, [r2, #0]

	}

}
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bcb0      	pop	{r4, r5, r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2000024c 	.word	0x2000024c
 800189c:	20000244 	.word	0x20000244
 80018a0:	cccccccd 	.word	0xcccccccd
 80018a4:	20000248 	.word	0x20000248
 80018a8:	200004a4 	.word	0x200004a4
 80018ac:	20000240 	.word	0x20000240

080018b0 <SCH_Delete_Then_Add_Task>:

void SCH_Delete_Then_Add_Task(){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

		Task temp = sTask[0];
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <SCH_Delete_Then_Add_Task+0x84>)
 80018b8:	463c      	mov	r4, r7
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e017      	b.n	80018fa <SCH_Delete_Then_Add_Task+0x4a>
		    sTask[i] = sTask[i+1];
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	4819      	ldr	r0, [pc, #100]	; (8001934 <SCH_Delete_Then_Add_Task+0x84>)
 80018d0:	6979      	ldr	r1, [r7, #20]
 80018d2:	460b      	mov	r3, r1
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4418      	add	r0, r3
 80018dc:	4915      	ldr	r1, [pc, #84]	; (8001934 <SCH_Delete_Then_Add_Task+0x84>)
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	4604      	mov	r4, r0
 80018ea:	461d      	mov	r5, r3
 80018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	6023      	str	r3, [r4, #0]
		for(int i = 0; i<len-1; i+=1){
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <SCH_Delete_Then_Add_Task+0x88>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	429a      	cmp	r2, r3
 8001904:	dbe1      	blt.n	80018ca <SCH_Delete_Then_Add_Task+0x1a>
		}
		len -= 1;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <SCH_Delete_Then_Add_Task+0x88>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	3b01      	subs	r3, #1
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SCH_Delete_Then_Add_Task+0x88>)
 800190e:	6013      	str	r3, [r2, #0]
		tail -= 1;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <SCH_Delete_Then_Add_Task+0x8c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <SCH_Delete_Then_Add_Task+0x8c>)
 8001918:	6013      	str	r3, [r2, #0]

		SCH_Add_Task(temp.pTask, temp.Delay + temp.Period, temp.Period);
 800191a:	6838      	ldr	r0, [r7, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff fde9 	bl	80014fc <SCH_Add_Task>

}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	2000024c 	.word	0x2000024c
 8001938:	200004a4 	.word	0x200004a4
 800193c:	20000240 	.word	0x20000240

08001940 <SCH_Update>:


void SCH_Update(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0

	int head_index_update = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 800194a:	e015      	b.n	8001978 <SCH_Update+0x38>
		sTask[head_index_update].RunMe += 1;
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <SCH_Update+0x68>)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	330c      	adds	r3, #12
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1c59      	adds	r1, r3, #1
 8001960:	4811      	ldr	r0, [pc, #68]	; (80019a8 <SCH_Update+0x68>)
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4403      	add	r3, r0
 800196e:	330c      	adds	r3, #12
 8001970:	6019      	str	r1, [r3, #0]
		head_index_update += 1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
	while(counter >= sTask[head_index_update].Delay){
 8001978:	490b      	ldr	r1, [pc, #44]	; (80019a8 <SCH_Update+0x68>)
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <SCH_Update+0x6c>)
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4293      	cmp	r3, r2
 8001990:	d9dc      	bls.n	800194c <SCH_Update+0xc>
	}

	counter+=1;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SCH_Update+0x6c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <SCH_Update+0x6c>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2000024c 	.word	0x2000024c
 80019ac:	200000e8 	.word	0x200000e8

080019b0 <SCH_Dispatch_Tasks>:
//
void SCH_Dispatch_Tasks(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	while(sTask[0].RunMe){
 80019b4:	e009      	b.n	80019ca <SCH_Dispatch_Tasks+0x1a>
	    sTask[0].RunMe -= 1;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SCH_Dispatch_Tasks+0x28>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <SCH_Dispatch_Tasks+0x28>)
 80019be:	60d3      	str	r3, [r2, #12]
	    (*sTask[0].pTask)();
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SCH_Dispatch_Tasks+0x28>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4798      	blx	r3
	    SCH_Delete_Then_Add_Task();
 80019c6:	f7ff ff73 	bl	80018b0 <SCH_Delete_Then_Add_Task>
	while(sTask[0].RunMe){
 80019ca:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <SCH_Dispatch_Tasks+0x28>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f1      	bne.n	80019b6 <SCH_Dispatch_Tasks+0x6>
	}
//	SCH_Report_Status();
//	SCH_Go_to_Sleep();
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000024c 	.word	0x2000024c

080019dc <setTimer1>:
int timer8_counter=0;
int timer8_flag= 0;
int timer9_counter=0;
int timer9_flag= 0;
void setTimer1(int duration)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CYCLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <setTimer1+0x2c>)
 80019e8:	fb82 1203 	smull	r1, r2, r2, r3
 80019ec:	1092      	asrs	r2, r2, #2
 80019ee:	17db      	asrs	r3, r3, #31
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <setTimer1+0x30>)
 80019f4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <setTimer1+0x34>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	66666667 	.word	0x66666667
 8001a0c:	20000118 	.word	0x20000118
 8001a10:	2000011c 	.word	0x2000011c

08001a14 <setTimer2>:
void setTimer2(int duration)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CYCLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <setTimer2+0x2c>)
 8001a20:	fb82 1203 	smull	r1, r2, r2, r3
 8001a24:	1092      	asrs	r2, r2, #2
 8001a26:	17db      	asrs	r3, r3, #31
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <setTimer2+0x30>)
 8001a2c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <setTimer2+0x34>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	66666667 	.word	0x66666667
 8001a44:	20000120 	.word	0x20000120
 8001a48:	20000124 	.word	0x20000124

08001a4c <setTimer3>:
void setTimer3(int duration)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CYCLE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <setTimer3+0x2c>)
 8001a58:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5c:	1092      	asrs	r2, r2, #2
 8001a5e:	17db      	asrs	r3, r3, #31
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <setTimer3+0x30>)
 8001a64:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <setTimer3+0x34>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	66666667 	.word	0x66666667
 8001a7c:	20000128 	.word	0x20000128
 8001a80:	2000012c 	.word	0x2000012c

08001a84 <setTimer4>:
void setTimer4(int duration)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/CYCLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <setTimer4+0x2c>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	1092      	asrs	r2, r2, #2
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <setTimer4+0x30>)
 8001a9c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <setTimer4+0x34>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	66666667 	.word	0x66666667
 8001ab4:	20000130 	.word	0x20000130
 8001ab8:	20000134 	.word	0x20000134

08001abc <setTimer5>:
void setTimer5(int duration)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CYCLE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <setTimer5+0x2c>)
 8001ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8001acc:	1092      	asrs	r2, r2, #2
 8001ace:	17db      	asrs	r3, r3, #31
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <setTimer5+0x30>)
 8001ad4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <setTimer5+0x34>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	66666667 	.word	0x66666667
 8001aec:	20000138 	.word	0x20000138
 8001af0:	2000013c 	.word	0x2000013c

08001af4 <setTimer6>:
void setTimer6(int duration)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/CYCLE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <setTimer6+0x2c>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	1092      	asrs	r2, r2, #2
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <setTimer6+0x30>)
 8001b0c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <setTimer6+0x34>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	66666667 	.word	0x66666667
 8001b24:	20000140 	.word	0x20000140
 8001b28:	20000144 	.word	0x20000144

08001b2c <setTimer7>:
void setTimer7(int duration)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/CYCLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <setTimer7+0x2c>)
 8001b38:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3c:	1092      	asrs	r2, r2, #2
 8001b3e:	17db      	asrs	r3, r3, #31
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <setTimer7+0x30>)
 8001b44:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <setTimer7+0x34>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	66666667 	.word	0x66666667
 8001b5c:	20000148 	.word	0x20000148
 8001b60:	2000014c 	.word	0x2000014c

08001b64 <setTimer8>:
void setTimer8(int duration)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/CYCLE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <setTimer8+0x2c>)
 8001b70:	fb82 1203 	smull	r1, r2, r2, r3
 8001b74:	1092      	asrs	r2, r2, #2
 8001b76:	17db      	asrs	r3, r3, #31
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <setTimer8+0x30>)
 8001b7c:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <setTimer8+0x34>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	66666667 	.word	0x66666667
 8001b94:	20000150 	.word	0x20000150
 8001b98:	20000154 	.word	0x20000154

08001b9c <setTimer9>:
void setTimer9(int duration)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/CYCLE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <setTimer9+0x2c>)
 8001ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bac:	1092      	asrs	r2, r2, #2
 8001bae:	17db      	asrs	r3, r3, #31
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <setTimer9+0x30>)
 8001bb4:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <setTimer9+0x34>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	66666667 	.word	0x66666667
 8001bcc:	20000158 	.word	0x20000158
 8001bd0:	2000015c 	.word	0x2000015c

08001bd4 <TimerRun>:
void TimerRun()
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <TimerRun+0x12c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dd0b      	ble.n	8001bf8 <TimerRun+0x24>
	{
		timer1_counter --;
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <TimerRun+0x12c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <TimerRun+0x12c>)
 8001be8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <TimerRun+0x12c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	dc02      	bgt.n	8001bf8 <TimerRun+0x24>
		{
			timer1_flag=1;
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <TimerRun+0x130>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <TimerRun+0x134>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	dd0b      	ble.n	8001c18 <TimerRun+0x44>
	{
		timer2_counter --;
 8001c00:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <TimerRun+0x134>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <TimerRun+0x134>)
 8001c08:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <TimerRun+0x134>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dc02      	bgt.n	8001c18 <TimerRun+0x44>
		{
			timer2_flag=1;
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <TimerRun+0x138>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 8001c18:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <TimerRun+0x13c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dd0b      	ble.n	8001c38 <TimerRun+0x64>
	{
		timer3_counter --;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <TimerRun+0x13c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <TimerRun+0x13c>)
 8001c28:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <TimerRun+0x13c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	dc02      	bgt.n	8001c38 <TimerRun+0x64>
		{
			timer3_flag=1;
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <TimerRun+0x140>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0)
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <TimerRun+0x144>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dd0b      	ble.n	8001c58 <TimerRun+0x84>
	{
		timer4_counter --;
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <TimerRun+0x144>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	4a34      	ldr	r2, [pc, #208]	; (8001d18 <TimerRun+0x144>)
 8001c48:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 8001c4a:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <TimerRun+0x144>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	dc02      	bgt.n	8001c58 <TimerRun+0x84>
		{
			timer4_flag=1;
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <TimerRun+0x148>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0)
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <TimerRun+0x14c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dd0b      	ble.n	8001c78 <TimerRun+0xa4>
	{
		timer5_counter --;
 8001c60:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <TimerRun+0x14c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <TimerRun+0x14c>)
 8001c68:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <TimerRun+0x14c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dc02      	bgt.n	8001c78 <TimerRun+0xa4>
		{
			timer5_flag=1;
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <TimerRun+0x150>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0)
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <TimerRun+0x154>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	dd0b      	ble.n	8001c98 <TimerRun+0xc4>
	{
		timer6_counter --;
 8001c80:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <TimerRun+0x154>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <TimerRun+0x154>)
 8001c88:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0)
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <TimerRun+0x154>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	dc02      	bgt.n	8001c98 <TimerRun+0xc4>
		{
			timer6_flag=1;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <TimerRun+0x158>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer7_counter > 0)
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <TimerRun+0x15c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dd0b      	ble.n	8001cb8 <TimerRun+0xe4>
	{
		timer7_counter --;
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <TimerRun+0x15c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <TimerRun+0x15c>)
 8001ca8:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0)
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <TimerRun+0x15c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	dc02      	bgt.n	8001cb8 <TimerRun+0xe4>
		{
			timer7_flag=1;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <TimerRun+0x160>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer8_counter > 0)
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <TimerRun+0x164>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dd0b      	ble.n	8001cd8 <TimerRun+0x104>
	{
		timer8_counter --;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <TimerRun+0x164>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <TimerRun+0x164>)
 8001cc8:	6013      	str	r3, [r2, #0]
		if(timer8_counter <= 0)
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <TimerRun+0x164>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	dc02      	bgt.n	8001cd8 <TimerRun+0x104>
		{
			timer8_flag=1;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <TimerRun+0x168>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer9_counter > 0)
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <TimerRun+0x16c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dd0b      	ble.n	8001cf8 <TimerRun+0x124>
	{
		timer9_counter --;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <TimerRun+0x16c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <TimerRun+0x16c>)
 8001ce8:	6013      	str	r3, [r2, #0]
		if(timer9_counter <= 0)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <TimerRun+0x16c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dc02      	bgt.n	8001cf8 <TimerRun+0x124>
		{
			timer9_flag=1;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <TimerRun+0x170>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000118 	.word	0x20000118
 8001d04:	2000011c 	.word	0x2000011c
 8001d08:	20000120 	.word	0x20000120
 8001d0c:	20000124 	.word	0x20000124
 8001d10:	20000128 	.word	0x20000128
 8001d14:	2000012c 	.word	0x2000012c
 8001d18:	20000130 	.word	0x20000130
 8001d1c:	20000134 	.word	0x20000134
 8001d20:	20000138 	.word	0x20000138
 8001d24:	2000013c 	.word	0x2000013c
 8001d28:	20000140 	.word	0x20000140
 8001d2c:	20000144 	.word	0x20000144
 8001d30:	20000148 	.word	0x20000148
 8001d34:	2000014c 	.word	0x2000014c
 8001d38:	20000150 	.word	0x20000150
 8001d3c:	20000154 	.word	0x20000154
 8001d40:	20000158 	.word	0x20000158
 8001d44:	2000015c 	.word	0x2000015c

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6193      	str	r3, [r2, #24]
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_MspInit+0x5c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x60>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_MspInit+0x60>)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000

08001dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d114      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	201c      	movs	r0, #28
 8001ddc:	f000 fa79 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de0:	201c      	movs	r0, #28
 8001de2:	f000 fa92 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001de6:	e010      	b.n	8001e0a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_TIM_Base_MspInit+0x6c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10b      	bne.n	8001e0a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_TIM_Base_MspInit+0x68>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40000400 	.word	0x40000400

08001e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0310 	add.w	r3, r7, #16
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_TIM_MspPostInit+0x58>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d117      	bne.n	8001e6c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_TIM_MspPostInit+0x5c>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_TIM_MspPostInit+0x5c>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_TIM_MspPostInit+0x5c>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e54:	2340      	movs	r3, #64	; 0x40
 8001e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_TIM_MspPostInit+0x60>)
 8001e68:	f000 fb1a 	bl	80024a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010800 	.word	0x40010800

08001e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_UART_MspInit+0x98>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d137      	bne.n	8001f10 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eaa:	61d3      	str	r3, [r2, #28]
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x9c>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	480f      	ldr	r0, [pc, #60]	; (8001f20 <HAL_UART_MspInit+0xa0>)
 8001ee4:	f000 fadc 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <HAL_UART_MspInit+0xa0>)
 8001efc:	f000 fad0 	bl	80024a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2026      	movs	r0, #38	; 0x26
 8001f06:	f000 f9e4 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f0a:	2026      	movs	r0, #38	; 0x26
 8001f0c:	f000 f9fd 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010800 	.word	0x40010800

08001f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <NMI_Handler+0x4>

08001f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <MemManage_Handler+0x4>

08001f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6a:	f000 f8bf 	bl	80020ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <TIM2_IRQHandler+0x10>)
 8001f7a:	f001 f9fb 	bl	8003374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200001b4 	.word	0x200001b4

08001f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <USART2_IRQHandler+0x10>)
 8001f8e:	f002 f893 	bl	80040b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200001fc 	.word	0x200001fc

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f002 fc6c 	bl	80048a8 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20005000 	.word	0x20005000
 8001ffc:	00000400 	.word	0x00000400
 8002000:	20000160 	.word	0x20000160
 8002004:	200004c0 	.word	0x200004c0

08002008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800201c:	e002      	b.n	8002024 <LoopCopyDataInit>

0800201e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002022:	3304      	adds	r3, #4

08002024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002028:	d3f9      	bcc.n	800201e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800202c:	4c0a      	ldr	r4, [pc, #40]	; (8002058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002030:	e001      	b.n	8002036 <LoopFillZerobss>

08002032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002034:	3204      	adds	r2, #4

08002036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002038:	d3fb      	bcc.n	8002032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800203a:	f7ff ffe5 	bl	8002008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203e:	f002 fc39 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002042:	f7ff f869 	bl	8001118 <main>
  bx lr
 8002046:	4770      	bx	lr
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002050:	08005274 	.word	0x08005274
  ldr r2, =_sbss
 8002054:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002058:	200004bc 	.word	0x200004bc

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_Init+0x28>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_Init+0x28>)
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	2003      	movs	r0, #3
 8002072:	f000 f923 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002076:	200f      	movs	r0, #15
 8002078:	f000 f808 	bl	800208c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207c:	f7ff fe64 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x54>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x58>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f93b 	bl	8002326 <HAL_SYSTICK_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00e      	b.n	80020d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d80a      	bhi.n	80020d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c0:	2200      	movs	r2, #0
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f000 f903 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <HAL_InitTick+0x5c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000020 	.word	0x20000020
 80020e4:	20000028 	.word	0x20000028
 80020e8:	20000024 	.word	0x20000024

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x1c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x20>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_IncTick+0x20>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000028 	.word	0x20000028
 800210c:	200004a8 	.word	0x200004a8

08002110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <HAL_GetTick+0x10>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	200004a8 	.word	0x200004a8

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4906      	ldr	r1, [pc, #24]	; (80021bc <__NVIC_EnableIRQ+0x34>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff90 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff2d 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff42 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff90 	bl	8002214 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5f 	bl	80021c0 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff35 	bl	8002188 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002350:	2b02      	cmp	r3, #2
 8002352:	d008      	beq.n	8002366 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e020      	b.n	80023a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 020e 	bic.w	r2, r2, #14
 8002374:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d005      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2204      	movs	r2, #4
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e051      	b.n	800247a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020e 	bic.w	r2, r2, #14
 80023e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_DMA_Abort_IT+0xd0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d029      	beq.n	8002454 <HAL_DMA_Abort_IT+0xa0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <HAL_DMA_Abort_IT+0xd4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_Abort_IT+0x9c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1f      	ldr	r2, [pc, #124]	; (800248c <HAL_DMA_Abort_IT+0xd8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01a      	beq.n	800244a <HAL_DMA_Abort_IT+0x96>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_DMA_Abort_IT+0xdc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d012      	beq.n	8002444 <HAL_DMA_Abort_IT+0x90>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_DMA_Abort_IT+0xe0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00a      	beq.n	800243e <HAL_DMA_Abort_IT+0x8a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_DMA_Abort_IT+0xe4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d102      	bne.n	8002438 <HAL_DMA_Abort_IT+0x84>
 8002432:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002436:	e00e      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	e00b      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 800243e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002442:	e008      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	e005      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	e002      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 8002450:	2310      	movs	r3, #16
 8002452:	e000      	b.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 8002454:	2301      	movs	r3, #1
 8002456:	4a11      	ldr	r2, [pc, #68]	; (800249c <HAL_DMA_Abort_IT+0xe8>)
 8002458:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
    } 
  }
  return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40020008 	.word	0x40020008
 8002488:	4002001c 	.word	0x4002001c
 800248c:	40020030 	.word	0x40020030
 8002490:	40020044 	.word	0x40020044
 8002494:	40020058 	.word	0x40020058
 8002498:	4002006c 	.word	0x4002006c
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e169      	b.n	8002788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b4:	2201      	movs	r2, #1
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8158 	bne.w	8002782 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a9a      	ldr	r2, [pc, #616]	; (8002740 <HAL_GPIO_Init+0x2a0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d05e      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024dc:	4a98      	ldr	r2, [pc, #608]	; (8002740 <HAL_GPIO_Init+0x2a0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d875      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024e2:	4a98      	ldr	r2, [pc, #608]	; (8002744 <HAL_GPIO_Init+0x2a4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d058      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024e8:	4a96      	ldr	r2, [pc, #600]	; (8002744 <HAL_GPIO_Init+0x2a4>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d86f      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024ee:	4a96      	ldr	r2, [pc, #600]	; (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d052      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 80024f4:	4a94      	ldr	r2, [pc, #592]	; (8002748 <HAL_GPIO_Init+0x2a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d869      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 80024fa:	4a94      	ldr	r2, [pc, #592]	; (800274c <HAL_GPIO_Init+0x2ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d04c      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 8002500:	4a92      	ldr	r2, [pc, #584]	; (800274c <HAL_GPIO_Init+0x2ac>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d863      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002506:	4a92      	ldr	r2, [pc, #584]	; (8002750 <HAL_GPIO_Init+0x2b0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d046      	beq.n	800259a <HAL_GPIO_Init+0xfa>
 800250c:	4a90      	ldr	r2, [pc, #576]	; (8002750 <HAL_GPIO_Init+0x2b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d85d      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 8002512:	2b12      	cmp	r3, #18
 8002514:	d82a      	bhi.n	800256c <HAL_GPIO_Init+0xcc>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d859      	bhi.n	80025ce <HAL_GPIO_Init+0x12e>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <HAL_GPIO_Init+0x80>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	0800259b 	.word	0x0800259b
 8002524:	08002575 	.word	0x08002575
 8002528:	08002587 	.word	0x08002587
 800252c:	080025c9 	.word	0x080025c9
 8002530:	080025cf 	.word	0x080025cf
 8002534:	080025cf 	.word	0x080025cf
 8002538:	080025cf 	.word	0x080025cf
 800253c:	080025cf 	.word	0x080025cf
 8002540:	080025cf 	.word	0x080025cf
 8002544:	080025cf 	.word	0x080025cf
 8002548:	080025cf 	.word	0x080025cf
 800254c:	080025cf 	.word	0x080025cf
 8002550:	080025cf 	.word	0x080025cf
 8002554:	080025cf 	.word	0x080025cf
 8002558:	080025cf 	.word	0x080025cf
 800255c:	080025cf 	.word	0x080025cf
 8002560:	080025cf 	.word	0x080025cf
 8002564:	0800257d 	.word	0x0800257d
 8002568:	08002591 	.word	0x08002591
 800256c:	4a79      	ldr	r2, [pc, #484]	; (8002754 <HAL_GPIO_Init+0x2b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002572:	e02c      	b.n	80025ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	623b      	str	r3, [r7, #32]
          break;
 800257a:	e029      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	3304      	adds	r3, #4
 8002582:	623b      	str	r3, [r7, #32]
          break;
 8002584:	e024      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	3308      	adds	r3, #8
 800258c:	623b      	str	r3, [r7, #32]
          break;
 800258e:	e01f      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	330c      	adds	r3, #12
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e01a      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d102      	bne.n	80025a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025a2:	2304      	movs	r3, #4
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e013      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b0:	2308      	movs	r3, #8
 80025b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	611a      	str	r2, [r3, #16]
          break;
 80025ba:	e009      	b.n	80025d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025bc:	2308      	movs	r3, #8
 80025be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	615a      	str	r2, [r3, #20]
          break;
 80025c6:	e003      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
          break;
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x130>
          break;
 80025ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2bff      	cmp	r3, #255	; 0xff
 80025d4:	d801      	bhi.n	80025da <HAL_GPIO_Init+0x13a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	e001      	b.n	80025de <HAL_GPIO_Init+0x13e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3304      	adds	r3, #4
 80025de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2bff      	cmp	r3, #255	; 0xff
 80025e4:	d802      	bhi.n	80025ec <HAL_GPIO_Init+0x14c>
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x152>
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	3b08      	subs	r3, #8
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	210f      	movs	r1, #15
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	401a      	ands	r2, r3
 8002604:	6a39      	ldr	r1, [r7, #32]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80b1 	beq.w	8002782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002620:	4b4d      	ldr	r3, [pc, #308]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_GPIO_Init+0x2b8>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2bc>)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	089b      	lsrs	r3, r3, #2
 800263e:	3302      	adds	r3, #2
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_GPIO_Init+0x2c0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d013      	beq.n	800268c <HAL_GPIO_Init+0x1ec>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3f      	ldr	r2, [pc, #252]	; (8002764 <HAL_GPIO_Init+0x2c4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00d      	beq.n	8002688 <HAL_GPIO_Init+0x1e8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <HAL_GPIO_Init+0x2c8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <HAL_GPIO_Init+0x1e4>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3d      	ldr	r2, [pc, #244]	; (800276c <HAL_GPIO_Init+0x2cc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_GPIO_Init+0x1e0>
 800267c:	2303      	movs	r3, #3
 800267e:	e006      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002680:	2304      	movs	r3, #4
 8002682:	e004      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002684:	2302      	movs	r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_GPIO_Init+0x1ee>
 800268c:	2300      	movs	r3, #0
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	f002 0203 	and.w	r2, r2, #3
 8002694:	0092      	lsls	r2, r2, #2
 8002696:	4093      	lsls	r3, r2
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800269e:	492f      	ldr	r1, [pc, #188]	; (800275c <HAL_GPIO_Init+0x2bc>)
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	3302      	adds	r3, #2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b8:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	492c      	ldr	r1, [pc, #176]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	4928      	ldr	r1, [pc, #160]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	491e      	ldr	r1, [pc, #120]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4918      	ldr	r1, [pc, #96]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	4914      	ldr	r1, [pc, #80]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d021      	beq.n	8002774 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	60cb      	str	r3, [r1, #12]
 800273c:	e021      	b.n	8002782 <HAL_GPIO_Init+0x2e2>
 800273e:	bf00      	nop
 8002740:	10320000 	.word	0x10320000
 8002744:	10310000 	.word	0x10310000
 8002748:	10220000 	.word	0x10220000
 800274c:	10210000 	.word	0x10210000
 8002750:	10120000 	.word	0x10120000
 8002754:	10110000 	.word	0x10110000
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	40010800 	.word	0x40010800
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40011000 	.word	0x40011000
 800276c:	40011400 	.word	0x40011400
 8002770:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_GPIO_Init+0x304>)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	43db      	mvns	r3, r3
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <HAL_GPIO_Init+0x304>)
 800277e:	4013      	ands	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	3301      	adds	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f47f ae8e 	bne.w	80024b4 <HAL_GPIO_Init+0x14>
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	372c      	adds	r7, #44	; 0x2c
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	807b      	strh	r3, [r7, #2]
 80027e2:	4613      	mov	r3, r2
 80027e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e6:	787b      	ldrb	r3, [r7, #1]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ec:	887a      	ldrh	r2, [r7, #2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f2:	e003      	b.n	80027fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	041a      	lsls	r2, r3, #16
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e26c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00c      	beq.n	800284e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002834:	4b8f      	ldr	r3, [pc, #572]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
 8002840:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284c:	d10b      	bne.n	8002866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284e:	4b89      	ldr	r3, [pc, #548]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d06c      	beq.n	8002934 <HAL_RCC_OscConfig+0x12c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d168      	bne.n	8002934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e246      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x76>
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a7f      	ldr	r2, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b78      	ldr	r3, [pc, #480]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a77      	ldr	r2, [pc, #476]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e01d      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xbc>
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a71      	ldr	r2, [pc, #452]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6f      	ldr	r3, [pc, #444]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6e      	ldr	r2, [pc, #440]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd4>
 80028c4:	4b6b      	ldr	r3, [pc, #428]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6a      	ldr	r2, [pc, #424]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7ff fc14 	bl	8002110 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ec:	f7ff fc10 	bl	8002110 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1fa      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b5d      	ldr	r3, [pc, #372]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe4>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fc00 	bl	8002110 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff fbfc 	bl	8002110 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1e6      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x10c>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002942:	4b4c      	ldr	r3, [pc, #304]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
 800295a:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1ba      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7ff fbb5 	bl	8002110 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff fbb1 	bl	8002110 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e19b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4927      	ldr	r1, [pc, #156]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x270>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fb94 	bl	8002110 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff fb90 	bl	8002110 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e17a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff fb74 	bl	8002110 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff fb70 	bl	8002110 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e15a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f000 fad8 	bl	8003000 <RCC_Delay>
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_OscConfig+0x274>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7ff fb5a 	bl	8002110 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5e:	e00f      	b.n	8002a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a60:	f7ff fb56 	bl	8002110 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d908      	bls.n	8002a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e140      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	42420000 	.word	0x42420000
 8002a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	4b9e      	ldr	r3, [pc, #632]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e9      	bne.n	8002a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 80a6 	beq.w	8002be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b97      	ldr	r3, [pc, #604]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b94      	ldr	r3, [pc, #592]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4a93      	ldr	r2, [pc, #588]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	61d3      	str	r3, [r2, #28]
 8002ab6:	4b91      	ldr	r3, [pc, #580]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b8e      	ldr	r3, [pc, #568]	; (8002d00 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <HAL_RCC_OscConfig+0x4f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a8a      	ldr	r2, [pc, #552]	; (8002d00 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff fb17 	bl	8002110 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff fb13 	bl	8002110 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e0fd      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b81      	ldr	r3, [pc, #516]	; (8002d00 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b0c:	4b7b      	ldr	r3, [pc, #492]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b22:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a72      	ldr	r2, [pc, #456]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x356>
 8002b44:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a6c      	ldr	r2, [pc, #432]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6213      	str	r3, [r2, #32]
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a69      	ldr	r2, [pc, #420]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x36e>
 8002b5e:	4b67      	ldr	r3, [pc, #412]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a66      	ldr	r2, [pc, #408]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fac7 	bl	8002110 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7ff fac3 	bl	8002110 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0ab      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x37e>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7ff fab1 	bl	8002110 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7ff faad 	bl	8002110 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e095      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b4c      	ldr	r3, [pc, #304]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8081 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d061      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d146      	bne.n	8002c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7ff fa81 	bl	8002110 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7ff fa7d 	bl	8002110 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e067      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	492d      	ldr	r1, [pc, #180]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a19      	ldr	r1, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	4927      	ldr	r1, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fa51 	bl	8002110 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff fa4d 	bl	8002110 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e037      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
 8002c90:	e02f      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <HAL_RCC_OscConfig+0x4fc>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7ff fa3a 	bl	8002110 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7ff fa36 	bl	8002110 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e020      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x498>
 8002cbe:	e018      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e013      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42420060 	.word	0x42420060

08002d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d0      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d910      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 0207 	bic.w	r2, r3, #7
 8002d32:	4965      	ldr	r1, [pc, #404]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b63      	ldr	r3, [pc, #396]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0b8      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	494d      	ldr	r1, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e07f      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e073      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06b      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4936      	ldr	r1, [pc, #216]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7ff f98a 	bl	8002110 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7ff f986 	bl	8002110 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e053      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d210      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	4922      	ldr	r1, [pc, #136]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e032      	b.n	8002ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4916      	ldr	r1, [pc, #88]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e96:	f000 f821 	bl	8002edc <HAL_RCC_GetSysClockFreq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	490a      	ldr	r1, [pc, #40]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea8:	5ccb      	ldrb	r3, [r1, r3]
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f8e8 	bl	800208c <HAL_InitTick>

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08005220 	.word	0x08005220
 8002ed4:	20000020 	.word	0x20000020
 8002ed8:	20000024 	.word	0x20000024

08002edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002edc:	b490      	push	{r4, r7}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ee2:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ee4:	1d3c      	adds	r4, r7, #4
 8002ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eec:	f240 2301 	movw	r3, #513	; 0x201
 8002ef0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x40>
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x46>
 8002f1a:	e02d      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1e:	623b      	str	r3, [r7, #32]
      break;
 8002f20:	e02d      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f2e:	4413      	add	r3, r2
 8002f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c5b      	lsrs	r3, r3, #17
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f4e:	4413      	add	r3, r2
 8002f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5a:	fb02 f203 	mul.w	r2, r2, r3
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	623b      	str	r3, [r7, #32]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7a:	623b      	str	r3, [r7, #32]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc90      	pop	{r4, r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	08005210 	.word	0x08005210
 8002f90:	40021000 	.word	0x40021000
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	003d0900 	.word	0x003d0900

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000020 	.word	0x20000020

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08005230 	.word	0x08005230

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	08005230 	.word	0x08005230

08003000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCC_Delay+0x34>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <RCC_Delay+0x38>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a5b      	lsrs	r3, r3, #9
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800301c:	bf00      	nop
  }
  while (Delay --);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1e5a      	subs	r2, r3, #1
 8003022:	60fa      	str	r2, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f9      	bne.n	800301c <RCC_Delay+0x1c>
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	20000020 	.word	0x20000020
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e041      	b.n	80030d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fea2 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 fc28 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d001      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e03a      	b.n	800316a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_TIM_Base_Start_IT+0x98>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x58>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311e:	d009      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x58>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <HAL_TIM_Base_Start_IT+0x9c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x58>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a13      	ldr	r2, [pc, #76]	; (800317c <HAL_TIM_Base_Start_IT+0xa0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d111      	bne.n	8003158 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b06      	cmp	r3, #6
 8003144:	d010      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	e007      	b.n	8003168 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800

08003180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e041      	b.n	8003216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f839 	bl	800321e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f000 fb86 	bl	80038d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x24>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e022      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d109      	bne.n	800326e <HAL_TIM_PWM_Start+0x3e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e015      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d109      	bne.n	8003288 <HAL_TIM_PWM_Start+0x58>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e008      	b.n	800329a <HAL_TIM_PWM_Start+0x6a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e05e      	b.n	8003360 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_TIM_PWM_Start+0x82>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b0:	e013      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d104      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x92>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	e00b      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_PWM_Start+0xa2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d0:	e003      	b.n	80032da <HAL_TIM_PWM_Start+0xaa>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fd74 	bl	8003dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_TIM_PWM_Start+0x138>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_TIM_PWM_Start+0x138>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_TIM_PWM_Start+0xfa>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d009      	beq.n	800332a <HAL_TIM_PWM_Start+0xfa>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a14      	ldr	r2, [pc, #80]	; (800336c <HAL_TIM_PWM_Start+0x13c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_TIM_PWM_Start+0xfa>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a12      	ldr	r2, [pc, #72]	; (8003370 <HAL_TIM_PWM_Start+0x140>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d111      	bne.n	800334e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d010      	beq.n	800335e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	e007      	b.n	800335e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800

08003374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0202 	mvn.w	r2, #2
 80033a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa6f 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa62 	bl	8003888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa71 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0204 	mvn.w	r2, #4
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa45 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa38 	bl	8003888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fa47 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b08      	cmp	r3, #8
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0208 	mvn.w	r2, #8
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2204      	movs	r2, #4
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa1b 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa0e 	bl	8003888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fa1d 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2208      	movs	r2, #8
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9f1 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9e4 	bl	8003888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f9f3 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0201 	mvn.w	r2, #1
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd fff2 	bl	80014dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fce1 	bl	8003ee6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f9b7 	bl	80038be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0220 	mvn.w	r2, #32
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fcac 	bl	8003ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800359a:	2302      	movs	r3, #2
 800359c:	e0ac      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b0c      	cmp	r3, #12
 80035aa:	f200 809f 	bhi.w	80036ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035e9 	.word	0x080035e9
 80035b8:	080036ed 	.word	0x080036ed
 80035bc:	080036ed 	.word	0x080036ed
 80035c0:	080036ed 	.word	0x080036ed
 80035c4:	08003629 	.word	0x08003629
 80035c8:	080036ed 	.word	0x080036ed
 80035cc:	080036ed 	.word	0x080036ed
 80035d0:	080036ed 	.word	0x080036ed
 80035d4:	0800366b 	.word	0x0800366b
 80035d8:	080036ed 	.word	0x080036ed
 80035dc:	080036ed 	.word	0x080036ed
 80035e0:	080036ed 	.word	0x080036ed
 80035e4:	080036ab 	.word	0x080036ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f9d0 	bl	8003994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0208 	orr.w	r2, r2, #8
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0204 	bic.w	r2, r2, #4
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	619a      	str	r2, [r3, #24]
      break;
 8003626:	e062      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fa16 	bl	8003a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6999      	ldr	r1, [r3, #24]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	021a      	lsls	r2, r3, #8
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]
      break;
 8003668:	e041      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fa5f 	bl	8003b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0208 	orr.w	r2, r2, #8
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0204 	bic.w	r2, r2, #4
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      break;
 80036a8:	e021      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 faa9 	bl	8003c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69d9      	ldr	r1, [r3, #28]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	61da      	str	r2, [r3, #28]
      break;
 80036ea:	e000      	b.n	80036ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIM_ConfigClockSource+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e0b3      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x180>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003750:	d03e      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0xd0>
 8003752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003756:	f200 8087 	bhi.w	8003868 <HAL_TIM_ConfigClockSource+0x168>
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	f000 8085 	beq.w	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d87f      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d01a      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0xa2>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d87b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d050      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x116>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d877      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003778:	2b50      	cmp	r3, #80	; 0x50
 800377a:	d03c      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xf6>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d873      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d058      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x136>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d86f      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d064      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x156>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d86b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d060      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x156>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d867      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05c      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x156>
 800379c:	2b10      	cmp	r3, #16
 800379e:	d05a      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037a0:	e062      	b.n	8003868 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f000 faee 	bl	8003d92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	609a      	str	r2, [r3, #8]
      break;
 80037ce:	e04e      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 fad7 	bl	8003d92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f2:	609a      	str	r2, [r3, #8]
      break;
 80037f4:	e03b      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	461a      	mov	r2, r3
 8003804:	f000 fa4e 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2150      	movs	r1, #80	; 0x50
 800380e:	4618      	mov	r0, r3
 8003810:	f000 faa5 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003814:	e02b      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	461a      	mov	r2, r3
 8003824:	f000 fa6c 	bl	8003d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2160      	movs	r1, #96	; 0x60
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fa95 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003834:	e01b      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	461a      	mov	r2, r3
 8003844:	f000 fa2e 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fa85 	bl	8003d5e <TIM_ITRx_SetConfig>
      break;
 8003854:	e00b      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f000 fa7c 	bl	8003d5e <TIM_ITRx_SetConfig>
        break;
 8003866:	e002      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800386c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a29      	ldr	r2, [pc, #164]	; (8003988 <TIM_Base_SetConfig+0xb8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x30>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x30>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a26      	ldr	r2, [pc, #152]	; (800398c <TIM_Base_SetConfig+0xbc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x30>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <TIM_Base_SetConfig+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <TIM_Base_SetConfig+0xb8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0x62>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x62>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_Base_SetConfig+0xbc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x62>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <TIM_Base_SetConfig+0xc0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <TIM_Base_SetConfig+0xb8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800

08003994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 0302 	bic.w	r3, r3, #2
 80039dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <TIM_OC1_SetConfig+0xc8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d10c      	bne.n	8003a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f023 0308 	bic.w	r3, r3, #8
 80039f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <TIM_OC1_SetConfig+0xc8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d111      	bne.n	8003a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f023 0210 	bic.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0320 	bic.w	r3, r3, #32
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <TIM_OC2_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10d      	bne.n	8003adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a14      	ldr	r2, [pc, #80]	; (8003b30 <TIM_OC2_SetConfig+0xd0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d113      	bne.n	8003b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00

08003b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <TIM_OC3_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10d      	bne.n	8003bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <TIM_OC3_SetConfig+0xd0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d113      	bne.n	8003bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	621a      	str	r2, [r3, #32]
}
 8003bf8:	bf00      	nop
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00

08003c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	031b      	lsls	r3, r3, #12
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a0f      	ldr	r2, [pc, #60]	; (8003ca0 <TIM_OC4_SetConfig+0x98>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d109      	bne.n	8003c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f023 0201 	bic.w	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 030a 	bic.w	r3, r3, #10
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 0210 	bic.w	r2, r3, #16
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f043 0307 	orr.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b087      	sub	sp, #28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	2201      	movs	r2, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1a      	ldr	r2, [r3, #32]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	401a      	ands	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e046      	b.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10c      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800

08003ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03f      	b.n	8003f8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd ffae 	bl	8001e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fc25 	bl	800478c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b08a      	sub	sp, #40	; 0x28
 8003f96:	af02      	add	r7, sp, #8
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d17c      	bne.n	80040ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_UART_Transmit+0x2c>
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e075      	b.n	80040ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Transmit+0x3e>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e06e      	b.n	80040ae <HAL_UART_Transmit+0x11c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2221      	movs	r2, #33	; 0x21
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe6:	f7fe f893 	bl	8002110 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	88fa      	ldrh	r2, [r7, #6]
 8003ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004000:	d108      	bne.n	8004014 <HAL_UART_Transmit+0x82>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d104      	bne.n	8004014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e003      	b.n	800401c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004024:	e02a      	b.n	800407c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fa11 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e036      	b.n	80040ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3302      	adds	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e007      	b.n	800406e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	781a      	ldrb	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3301      	adds	r3, #1
 800406c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1cf      	bne.n	8004026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f9e1 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e006      	b.n	80040ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_UART_IRQHandler+0x52>
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa99 	bl	800463a <UART_Receive_IT>
      return;
 8004108:	e17b      	b.n	8004402 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80b1 	beq.w	8004274 <HAL_UART_IRQHandler+0x1bc>
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_UART_IRQHandler+0x70>
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80a6 	beq.w	8004274 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_UART_IRQHandler+0x90>
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f043 0201 	orr.w	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_UART_IRQHandler+0xb0>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0202 	orr.w	r2, r3, #2
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_UART_IRQHandler+0xd0>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00f      	beq.n	80041b2 <HAL_UART_IRQHandler+0xfa>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_UART_IRQHandler+0xee>
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0208 	orr.w	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 811e 	beq.w	80043f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_UART_IRQHandler+0x11e>
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fa32 	bl	800463a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_UART_IRQHandler+0x146>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d031      	beq.n	8004262 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f974 	bl	80044ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d023      	beq.n	800425a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004220:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4a76      	ldr	r2, [pc, #472]	; (8004408 <HAL_UART_IRQHandler+0x350>)
 8004230:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f8bc 	bl	80023b4 <HAL_DMA_Abort_IT>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004250:	e00e      	b.n	8004270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8ec 	bl	8004430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004258:	e00a      	b.n	8004270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8e8 	bl	8004430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	e006      	b.n	8004270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8e4 	bl	8004430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800426e:	e0c3      	b.n	80043f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	bf00      	nop
    return;
 8004272:	e0c1      	b.n	80043f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	2b01      	cmp	r3, #1
 800427a:	f040 80a1 	bne.w	80043c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 809b 	beq.w	80043c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8095 	beq.w	80043c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d04e      	beq.n	8004358 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80042c4:	8a3b      	ldrh	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8098 	beq.w	80043fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042d0:	8a3a      	ldrh	r2, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	f080 8092 	bcs.w	80043fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8a3a      	ldrh	r2, [r7, #16]
 80042dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d02b      	beq.n	8004340 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004316:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0210 	bic.w	r2, r2, #16
 8004334:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd ffff 	bl	800233e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f876 	bl	8004442 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004356:	e051      	b.n	80043fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004360:	b29b      	uxth	r3, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d047      	beq.n	8004400 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004370:	8a7b      	ldrh	r3, [r7, #18]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d044      	beq.n	8004400 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004384:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0210 	bic.w	r2, r2, #16
 80043b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043b4:	8a7b      	ldrh	r3, [r7, #18]
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f842 	bl	8004442 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043be:	e01f      	b.n	8004400 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_UART_IRQHandler+0x324>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8c9 	bl	800456c <UART_Transmit_IT>
    return;
 80043da:	e012      	b.n	8004402 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <HAL_UART_IRQHandler+0x34a>
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f90a 	bl	800460a <UART_EndTransmit_IT>
    return;
 80043f6:	e004      	b.n	8004402 <HAL_UART_IRQHandler+0x34a>
    return;
 80043f8:	bf00      	nop
 80043fa:	e002      	b.n	8004402 <HAL_UART_IRQHandler+0x34a>
      return;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_UART_IRQHandler+0x34a>
      return;
 8004400:	bf00      	nop
  }
}
 8004402:	3728      	adds	r7, #40	; 0x28
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08004545 	.word	0x08004545

0800440c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	e02c      	b.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d028      	beq.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
 8004478:	f7fd fe4a 	bl	8002110 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	429a      	cmp	r2, r3
 8004486:	d21d      	bcs.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004496:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e00f      	b.n	80044e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf0c      	ite	eq
 80044d4:	2301      	moveq	r3, #1
 80044d6:	2300      	movne	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d0c3      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004502:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0210 	bic.w	r2, r2, #16
 800452a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff66 	bl	8004430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b21      	cmp	r3, #33	; 0x21
 800457e:	d13e      	bne.n	80045fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	d114      	bne.n	80045b4 <UART_Transmit_IT+0x48>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d110      	bne.n	80045b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	1c9a      	adds	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]
 80045b2:	e008      	b.n	80045c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	1c59      	adds	r1, r3, #1
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6211      	str	r1, [r2, #32]
 80045be:	781a      	ldrb	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	4619      	mov	r1, r3
 80045d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff feee 	bl	800440c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b22      	cmp	r3, #34	; 0x22
 800464c:	f040 8099 	bne.w	8004782 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004658:	d117      	bne.n	800468a <UART_Receive_IT+0x50>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d113      	bne.n	800468a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004678:	b29a      	uxth	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
 8004688:	e026      	b.n	80046d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d007      	beq.n	80046ae <UART_Receive_IT+0x74>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <UART_Receive_IT+0x82>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e008      	b.n	80046ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4619      	mov	r1, r3
 80046e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d148      	bne.n	800477e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68da      	ldr	r2, [r3, #12]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0220 	bic.w	r2, r2, #32
 80046fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800470a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695a      	ldr	r2, [r3, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	2b01      	cmp	r3, #1
 800472a:	d123      	bne.n	8004774 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0210 	bic.w	r2, r2, #16
 8004740:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b10      	cmp	r3, #16
 800474e:	d10a      	bne.n	8004766 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fe68 	bl	8004442 <HAL_UARTEx_RxEventCallback>
 8004772:	e002      	b.n	800477a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fe52 	bl	800441e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e002      	b.n	8004784 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047c6:	f023 030c 	bic.w	r3, r3, #12
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <UART_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d103      	bne.n	80047fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047f4:	f7fe fbf0 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	e002      	b.n	8004802 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047fc:	f7fe fbd8 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8004800:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009a      	lsls	r2, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	0119      	lsls	r1, r3, #4
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	009a      	lsls	r2, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	fbb2 f2f3 	udiv	r2, r2, r3
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <UART_SetConfig+0x118>)
 800483a:	fba3 0302 	umull	r0, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	2064      	movs	r0, #100	; 0x64
 8004842:	fb00 f303 	mul.w	r3, r0, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	3332      	adds	r3, #50	; 0x32
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <UART_SetConfig+0x118>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	4419      	add	r1, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <UART_SetConfig+0x118>)
 8004872:	fba3 0302 	umull	r0, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2064      	movs	r0, #100	; 0x64
 800487a:	fb00 f303 	mul.w	r3, r0, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	; 0x32
 8004884:	4a07      	ldr	r2, [pc, #28]	; (80048a4 <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 020f 	and.w	r2, r3, #15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	440a      	add	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40013800 	.word	0x40013800
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <__errno>:
 80048a8:	4b01      	ldr	r3, [pc, #4]	; (80048b0 <__errno+0x8>)
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000002c 	.word	0x2000002c

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2600      	movs	r6, #0
 80048b8:	4d0c      	ldr	r5, [pc, #48]	; (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a6      	cmp	r6, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	f000 fc5c 	bl	8005180 <_init>
 80048c8:	2600      	movs	r6, #0
 80048ca:	4d0a      	ldr	r5, [pc, #40]	; (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	; (80048f8 <__libc_init_array+0x44>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a6      	cmp	r6, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048dc:	4798      	blx	r3
 80048de:	3601      	adds	r6, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e6:	4798      	blx	r3
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	0800526c 	.word	0x0800526c
 80048f0:	0800526c 	.word	0x0800526c
 80048f4:	0800526c 	.word	0x0800526c
 80048f8:	08005270 	.word	0x08005270

080048fc <memset>:
 80048fc:	4603      	mov	r3, r0
 80048fe:	4402      	add	r2, r0
 8004900:	4293      	cmp	r3, r2
 8004902:	d100      	bne.n	8004906 <memset+0xa>
 8004904:	4770      	bx	lr
 8004906:	f803 1b01 	strb.w	r1, [r3], #1
 800490a:	e7f9      	b.n	8004900 <memset+0x4>

0800490c <siprintf>:
 800490c:	b40e      	push	{r1, r2, r3}
 800490e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004912:	b500      	push	{lr}
 8004914:	b09c      	sub	sp, #112	; 0x70
 8004916:	ab1d      	add	r3, sp, #116	; 0x74
 8004918:	9002      	str	r0, [sp, #8]
 800491a:	9006      	str	r0, [sp, #24]
 800491c:	9107      	str	r1, [sp, #28]
 800491e:	9104      	str	r1, [sp, #16]
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <siprintf+0x38>)
 8004922:	4909      	ldr	r1, [pc, #36]	; (8004948 <siprintf+0x3c>)
 8004924:	f853 2b04 	ldr.w	r2, [r3], #4
 8004928:	9105      	str	r1, [sp, #20]
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	a902      	add	r1, sp, #8
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	f000 f868 	bl	8004a04 <_svfiprintf_r>
 8004934:	2200      	movs	r2, #0
 8004936:	9b02      	ldr	r3, [sp, #8]
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	b01c      	add	sp, #112	; 0x70
 800493c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004940:	b003      	add	sp, #12
 8004942:	4770      	bx	lr
 8004944:	2000002c 	.word	0x2000002c
 8004948:	ffff0208 	.word	0xffff0208

0800494c <__ssputs_r>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	688e      	ldr	r6, [r1, #8]
 8004952:	4682      	mov	sl, r0
 8004954:	429e      	cmp	r6, r3
 8004956:	460c      	mov	r4, r1
 8004958:	4690      	mov	r8, r2
 800495a:	461f      	mov	r7, r3
 800495c:	d838      	bhi.n	80049d0 <__ssputs_r+0x84>
 800495e:	898a      	ldrh	r2, [r1, #12]
 8004960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004964:	d032      	beq.n	80049cc <__ssputs_r+0x80>
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	6909      	ldr	r1, [r1, #16]
 800496a:	3301      	adds	r3, #1
 800496c:	eba5 0901 	sub.w	r9, r5, r1
 8004970:	6965      	ldr	r5, [r4, #20]
 8004972:	444b      	add	r3, r9
 8004974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800497c:	106d      	asrs	r5, r5, #1
 800497e:	429d      	cmp	r5, r3
 8004980:	bf38      	it	cc
 8004982:	461d      	movcc	r5, r3
 8004984:	0553      	lsls	r3, r2, #21
 8004986:	d531      	bpl.n	80049ec <__ssputs_r+0xa0>
 8004988:	4629      	mov	r1, r5
 800498a:	f000 fb53 	bl	8005034 <_malloc_r>
 800498e:	4606      	mov	r6, r0
 8004990:	b950      	cbnz	r0, 80049a8 <__ssputs_r+0x5c>
 8004992:	230c      	movs	r3, #12
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	f8ca 3000 	str.w	r3, [sl]
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	464a      	mov	r2, r9
 80049aa:	6921      	ldr	r1, [r4, #16]
 80049ac:	f000 face 	bl	8004f4c <memcpy>
 80049b0:	89a3      	ldrh	r3, [r4, #12]
 80049b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	6126      	str	r6, [r4, #16]
 80049be:	444e      	add	r6, r9
 80049c0:	6026      	str	r6, [r4, #0]
 80049c2:	463e      	mov	r6, r7
 80049c4:	6165      	str	r5, [r4, #20]
 80049c6:	eba5 0509 	sub.w	r5, r5, r9
 80049ca:	60a5      	str	r5, [r4, #8]
 80049cc:	42be      	cmp	r6, r7
 80049ce:	d900      	bls.n	80049d2 <__ssputs_r+0x86>
 80049d0:	463e      	mov	r6, r7
 80049d2:	4632      	mov	r2, r6
 80049d4:	4641      	mov	r1, r8
 80049d6:	6820      	ldr	r0, [r4, #0]
 80049d8:	f000 fac6 	bl	8004f68 <memmove>
 80049dc:	68a3      	ldr	r3, [r4, #8]
 80049de:	6822      	ldr	r2, [r4, #0]
 80049e0:	1b9b      	subs	r3, r3, r6
 80049e2:	4432      	add	r2, r6
 80049e4:	2000      	movs	r0, #0
 80049e6:	60a3      	str	r3, [r4, #8]
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	e7db      	b.n	80049a4 <__ssputs_r+0x58>
 80049ec:	462a      	mov	r2, r5
 80049ee:	f000 fb7b 	bl	80050e8 <_realloc_r>
 80049f2:	4606      	mov	r6, r0
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1e1      	bne.n	80049bc <__ssputs_r+0x70>
 80049f8:	4650      	mov	r0, sl
 80049fa:	6921      	ldr	r1, [r4, #16]
 80049fc:	f000 face 	bl	8004f9c <_free_r>
 8004a00:	e7c7      	b.n	8004992 <__ssputs_r+0x46>
	...

08004a04 <_svfiprintf_r>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	4698      	mov	r8, r3
 8004a0a:	898b      	ldrh	r3, [r1, #12]
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	460d      	mov	r5, r1
 8004a12:	4614      	mov	r4, r2
 8004a14:	b09d      	sub	sp, #116	; 0x74
 8004a16:	d50e      	bpl.n	8004a36 <_svfiprintf_r+0x32>
 8004a18:	690b      	ldr	r3, [r1, #16]
 8004a1a:	b963      	cbnz	r3, 8004a36 <_svfiprintf_r+0x32>
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	f000 fb09 	bl	8005034 <_malloc_r>
 8004a22:	6028      	str	r0, [r5, #0]
 8004a24:	6128      	str	r0, [r5, #16]
 8004a26:	b920      	cbnz	r0, 8004a32 <_svfiprintf_r+0x2e>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e0d1      	b.n	8004bd6 <_svfiprintf_r+0x1d2>
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	616b      	str	r3, [r5, #20]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a40:	2330      	movs	r3, #48	; 0x30
 8004a42:	f04f 0901 	mov.w	r9, #1
 8004a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004bf0 <_svfiprintf_r+0x1ec>
 8004a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a52:	4623      	mov	r3, r4
 8004a54:	469a      	mov	sl, r3
 8004a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5a:	b10a      	cbz	r2, 8004a60 <_svfiprintf_r+0x5c>
 8004a5c:	2a25      	cmp	r2, #37	; 0x25
 8004a5e:	d1f9      	bne.n	8004a54 <_svfiprintf_r+0x50>
 8004a60:	ebba 0b04 	subs.w	fp, sl, r4
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x7a>
 8004a66:	465b      	mov	r3, fp
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ff6d 	bl	800494c <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80aa 	beq.w	8004bcc <_svfiprintf_r+0x1c8>
 8004a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a7a:	445a      	add	r2, fp
 8004a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80a2 	beq.w	8004bcc <_svfiprintf_r+0x1c8>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a92:	f10a 0a01 	add.w	sl, sl, #1
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	4851      	ldr	r0, [pc, #324]	; (8004bf0 <_svfiprintf_r+0x1ec>)
 8004aaa:	f000 fa41 	bl	8004f30 <memchr>
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	b9d8      	cbnz	r0, 8004aea <_svfiprintf_r+0xe6>
 8004ab2:	06d0      	lsls	r0, r2, #27
 8004ab4:	bf44      	itt	mi
 8004ab6:	2320      	movmi	r3, #32
 8004ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004abc:	0711      	lsls	r1, r2, #28
 8004abe:	bf44      	itt	mi
 8004ac0:	232b      	movmi	r3, #43	; 0x2b
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b2a      	cmp	r3, #42	; 0x2a
 8004acc:	d015      	beq.n	8004afa <_svfiprintf_r+0xf6>
 8004ace:	4654      	mov	r4, sl
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f04f 0c0a 	mov.w	ip, #10
 8004ad6:	9a07      	ldr	r2, [sp, #28]
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ade:	3b30      	subs	r3, #48	; 0x30
 8004ae0:	2b09      	cmp	r3, #9
 8004ae2:	d94e      	bls.n	8004b82 <_svfiprintf_r+0x17e>
 8004ae4:	b1b0      	cbz	r0, 8004b14 <_svfiprintf_r+0x110>
 8004ae6:	9207      	str	r2, [sp, #28]
 8004ae8:	e014      	b.n	8004b14 <_svfiprintf_r+0x110>
 8004aea:	eba0 0308 	sub.w	r3, r0, r8
 8004aee:	fa09 f303 	lsl.w	r3, r9, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	46a2      	mov	sl, r4
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	e7d2      	b.n	8004aa0 <_svfiprintf_r+0x9c>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	9103      	str	r1, [sp, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfbb      	ittet	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0c:	9307      	strge	r3, [sp, #28]
 8004b0e:	9307      	strlt	r3, [sp, #28]
 8004b10:	bfb8      	it	lt
 8004b12:	9204      	strlt	r2, [sp, #16]
 8004b14:	7823      	ldrb	r3, [r4, #0]
 8004b16:	2b2e      	cmp	r3, #46	; 0x2e
 8004b18:	d10c      	bne.n	8004b34 <_svfiprintf_r+0x130>
 8004b1a:	7863      	ldrb	r3, [r4, #1]
 8004b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1e:	d135      	bne.n	8004b8c <_svfiprintf_r+0x188>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	3402      	adds	r4, #2
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	9203      	str	r2, [sp, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bfb8      	it	lt
 8004b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b32:	9305      	str	r3, [sp, #20]
 8004b34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c00 <_svfiprintf_r+0x1fc>
 8004b38:	2203      	movs	r2, #3
 8004b3a:	4650      	mov	r0, sl
 8004b3c:	7821      	ldrb	r1, [r4, #0]
 8004b3e:	f000 f9f7 	bl	8004f30 <memchr>
 8004b42:	b140      	cbz	r0, 8004b56 <_svfiprintf_r+0x152>
 8004b44:	2340      	movs	r3, #64	; 0x40
 8004b46:	eba0 000a 	sub.w	r0, r0, sl
 8004b4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	3401      	adds	r4, #1
 8004b52:	4303      	orrs	r3, r0
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	4825      	ldr	r0, [pc, #148]	; (8004bf4 <_svfiprintf_r+0x1f0>)
 8004b5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b62:	f000 f9e5 	bl	8004f30 <memchr>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d038      	beq.n	8004bdc <_svfiprintf_r+0x1d8>
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <_svfiprintf_r+0x1f4>)
 8004b6c:	bb1b      	cbnz	r3, 8004bb6 <_svfiprintf_r+0x1b2>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	3307      	adds	r3, #7
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	3308      	adds	r3, #8
 8004b78:	9303      	str	r3, [sp, #12]
 8004b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7c:	4433      	add	r3, r6
 8004b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b80:	e767      	b.n	8004a52 <_svfiprintf_r+0x4e>
 8004b82:	460c      	mov	r4, r1
 8004b84:	2001      	movs	r0, #1
 8004b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b8a:	e7a5      	b.n	8004ad8 <_svfiprintf_r+0xd4>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f04f 0c0a 	mov.w	ip, #10
 8004b92:	4619      	mov	r1, r3
 8004b94:	3401      	adds	r4, #1
 8004b96:	9305      	str	r3, [sp, #20]
 8004b98:	4620      	mov	r0, r4
 8004b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9e:	3a30      	subs	r2, #48	; 0x30
 8004ba0:	2a09      	cmp	r2, #9
 8004ba2:	d903      	bls.n	8004bac <_svfiprintf_r+0x1a8>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0c5      	beq.n	8004b34 <_svfiprintf_r+0x130>
 8004ba8:	9105      	str	r1, [sp, #20]
 8004baa:	e7c3      	b.n	8004b34 <_svfiprintf_r+0x130>
 8004bac:	4604      	mov	r4, r0
 8004bae:	2301      	movs	r3, #1
 8004bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bb4:	e7f0      	b.n	8004b98 <_svfiprintf_r+0x194>
 8004bb6:	ab03      	add	r3, sp, #12
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	462a      	mov	r2, r5
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <_svfiprintf_r+0x1f8>)
 8004bc0:	a904      	add	r1, sp, #16
 8004bc2:	f3af 8000 	nop.w
 8004bc6:	1c42      	adds	r2, r0, #1
 8004bc8:	4606      	mov	r6, r0
 8004bca:	d1d6      	bne.n	8004b7a <_svfiprintf_r+0x176>
 8004bcc:	89ab      	ldrh	r3, [r5, #12]
 8004bce:	065b      	lsls	r3, r3, #25
 8004bd0:	f53f af2c 	bmi.w	8004a2c <_svfiprintf_r+0x28>
 8004bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bd6:	b01d      	add	sp, #116	; 0x74
 8004bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bdc:	ab03      	add	r3, sp, #12
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	462a      	mov	r2, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <_svfiprintf_r+0x1f8>)
 8004be6:	a904      	add	r1, sp, #16
 8004be8:	f000 f87c 	bl	8004ce4 <_printf_i>
 8004bec:	e7eb      	b.n	8004bc6 <_svfiprintf_r+0x1c2>
 8004bee:	bf00      	nop
 8004bf0:	08005238 	.word	0x08005238
 8004bf4:	08005242 	.word	0x08005242
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	0800494d 	.word	0x0800494d
 8004c00:	0800523e 	.word	0x0800523e

08004c04 <_printf_common>:
 8004c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	4616      	mov	r6, r2
 8004c0a:	4699      	mov	r9, r3
 8004c0c:	688a      	ldr	r2, [r1, #8]
 8004c0e:	690b      	ldr	r3, [r1, #16]
 8004c10:	4607      	mov	r7, r0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfb8      	it	lt
 8004c16:	4613      	movlt	r3, r2
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c1e:	460c      	mov	r4, r1
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	b10a      	cbz	r2, 8004c2a <_printf_common+0x26>
 8004c26:	3301      	adds	r3, #1
 8004c28:	6033      	str	r3, [r6, #0]
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	0699      	lsls	r1, r3, #26
 8004c2e:	bf42      	ittt	mi
 8004c30:	6833      	ldrmi	r3, [r6, #0]
 8004c32:	3302      	addmi	r3, #2
 8004c34:	6033      	strmi	r3, [r6, #0]
 8004c36:	6825      	ldr	r5, [r4, #0]
 8004c38:	f015 0506 	ands.w	r5, r5, #6
 8004c3c:	d106      	bne.n	8004c4c <_printf_common+0x48>
 8004c3e:	f104 0a19 	add.w	sl, r4, #25
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	6832      	ldr	r2, [r6, #0]
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	dc28      	bgt.n	8004c9e <_printf_common+0x9a>
 8004c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c50:	1e13      	subs	r3, r2, #0
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	bf18      	it	ne
 8004c56:	2301      	movne	r3, #1
 8004c58:	0692      	lsls	r2, r2, #26
 8004c5a:	d42d      	bmi.n	8004cb8 <_printf_common+0xb4>
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d020      	beq.n	8004cac <_printf_common+0xa8>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	68e5      	ldr	r5, [r4, #12]
 8004c6e:	f003 0306 	and.w	r3, r3, #6
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	bf18      	it	ne
 8004c76:	2500      	movne	r5, #0
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	f04f 0600 	mov.w	r6, #0
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	bf08      	it	eq
 8004c82:	1aad      	subeq	r5, r5, r2
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	bf08      	it	eq
 8004c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bfc4      	itt	gt
 8004c90:	1a9b      	subgt	r3, r3, r2
 8004c92:	18ed      	addgt	r5, r5, r3
 8004c94:	341a      	adds	r4, #26
 8004c96:	42b5      	cmp	r5, r6
 8004c98:	d11a      	bne.n	8004cd0 <_printf_common+0xcc>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e008      	b.n	8004cb0 <_printf_common+0xac>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0xb0>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7c4      	b.n	8004c42 <_printf_common+0x3e>
 8004cb8:	2030      	movs	r0, #48	; 0x30
 8004cba:	18e1      	adds	r1, r4, r3
 8004cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc6:	4422      	add	r2, r4
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cce:	e7c5      	b.n	8004c5c <_printf_common+0x58>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0e6      	beq.n	8004cac <_printf_common+0xa8>
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7d9      	b.n	8004c96 <_printf_common+0x92>
	...

08004ce4 <_printf_i>:
 8004ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce8:	460c      	mov	r4, r1
 8004cea:	7e27      	ldrb	r7, [r4, #24]
 8004cec:	4691      	mov	r9, r2
 8004cee:	2f78      	cmp	r7, #120	; 0x78
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	469a      	mov	sl, r3
 8004cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004cf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cfa:	d807      	bhi.n	8004d0c <_printf_i+0x28>
 8004cfc:	2f62      	cmp	r7, #98	; 0x62
 8004cfe:	d80a      	bhi.n	8004d16 <_printf_i+0x32>
 8004d00:	2f00      	cmp	r7, #0
 8004d02:	f000 80d9 	beq.w	8004eb8 <_printf_i+0x1d4>
 8004d06:	2f58      	cmp	r7, #88	; 0x58
 8004d08:	f000 80a4 	beq.w	8004e54 <_printf_i+0x170>
 8004d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d14:	e03a      	b.n	8004d8c <_printf_i+0xa8>
 8004d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d1a:	2b15      	cmp	r3, #21
 8004d1c:	d8f6      	bhi.n	8004d0c <_printf_i+0x28>
 8004d1e:	a001      	add	r0, pc, #4	; (adr r0, 8004d24 <_printf_i+0x40>)
 8004d20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d24:	08004d7d 	.word	0x08004d7d
 8004d28:	08004d91 	.word	0x08004d91
 8004d2c:	08004d0d 	.word	0x08004d0d
 8004d30:	08004d0d 	.word	0x08004d0d
 8004d34:	08004d0d 	.word	0x08004d0d
 8004d38:	08004d0d 	.word	0x08004d0d
 8004d3c:	08004d91 	.word	0x08004d91
 8004d40:	08004d0d 	.word	0x08004d0d
 8004d44:	08004d0d 	.word	0x08004d0d
 8004d48:	08004d0d 	.word	0x08004d0d
 8004d4c:	08004d0d 	.word	0x08004d0d
 8004d50:	08004e9f 	.word	0x08004e9f
 8004d54:	08004dc1 	.word	0x08004dc1
 8004d58:	08004e81 	.word	0x08004e81
 8004d5c:	08004d0d 	.word	0x08004d0d
 8004d60:	08004d0d 	.word	0x08004d0d
 8004d64:	08004ec1 	.word	0x08004ec1
 8004d68:	08004d0d 	.word	0x08004d0d
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004d0d 	.word	0x08004d0d
 8004d74:	08004d0d 	.word	0x08004d0d
 8004d78:	08004e89 	.word	0x08004e89
 8004d7c:	680b      	ldr	r3, [r1, #0]
 8004d7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	600a      	str	r2, [r1, #0]
 8004d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0a4      	b.n	8004eda <_printf_i+0x1f6>
 8004d90:	6825      	ldr	r5, [r4, #0]
 8004d92:	6808      	ldr	r0, [r1, #0]
 8004d94:	062e      	lsls	r6, r5, #24
 8004d96:	f100 0304 	add.w	r3, r0, #4
 8004d9a:	d50a      	bpl.n	8004db2 <_printf_i+0xce>
 8004d9c:	6805      	ldr	r5, [r0, #0]
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	da03      	bge.n	8004dac <_printf_i+0xc8>
 8004da4:	232d      	movs	r3, #45	; 0x2d
 8004da6:	426d      	negs	r5, r5
 8004da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dac:	230a      	movs	r3, #10
 8004dae:	485e      	ldr	r0, [pc, #376]	; (8004f28 <_printf_i+0x244>)
 8004db0:	e019      	b.n	8004de6 <_printf_i+0x102>
 8004db2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004db6:	6805      	ldr	r5, [r0, #0]
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	bf18      	it	ne
 8004dbc:	b22d      	sxthne	r5, r5
 8004dbe:	e7ef      	b.n	8004da0 <_printf_i+0xbc>
 8004dc0:	680b      	ldr	r3, [r1, #0]
 8004dc2:	6825      	ldr	r5, [r4, #0]
 8004dc4:	1d18      	adds	r0, r3, #4
 8004dc6:	6008      	str	r0, [r1, #0]
 8004dc8:	0628      	lsls	r0, r5, #24
 8004dca:	d501      	bpl.n	8004dd0 <_printf_i+0xec>
 8004dcc:	681d      	ldr	r5, [r3, #0]
 8004dce:	e002      	b.n	8004dd6 <_printf_i+0xf2>
 8004dd0:	0669      	lsls	r1, r5, #25
 8004dd2:	d5fb      	bpl.n	8004dcc <_printf_i+0xe8>
 8004dd4:	881d      	ldrh	r5, [r3, #0]
 8004dd6:	2f6f      	cmp	r7, #111	; 0x6f
 8004dd8:	bf0c      	ite	eq
 8004dda:	2308      	moveq	r3, #8
 8004ddc:	230a      	movne	r3, #10
 8004dde:	4852      	ldr	r0, [pc, #328]	; (8004f28 <_printf_i+0x244>)
 8004de0:	2100      	movs	r1, #0
 8004de2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de6:	6866      	ldr	r6, [r4, #4]
 8004de8:	2e00      	cmp	r6, #0
 8004dea:	bfa8      	it	ge
 8004dec:	6821      	ldrge	r1, [r4, #0]
 8004dee:	60a6      	str	r6, [r4, #8]
 8004df0:	bfa4      	itt	ge
 8004df2:	f021 0104 	bicge.w	r1, r1, #4
 8004df6:	6021      	strge	r1, [r4, #0]
 8004df8:	b90d      	cbnz	r5, 8004dfe <_printf_i+0x11a>
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	d04d      	beq.n	8004e9a <_printf_i+0x1b6>
 8004dfe:	4616      	mov	r6, r2
 8004e00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e04:	fb03 5711 	mls	r7, r3, r1, r5
 8004e08:	5dc7      	ldrb	r7, [r0, r7]
 8004e0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e0e:	462f      	mov	r7, r5
 8004e10:	42bb      	cmp	r3, r7
 8004e12:	460d      	mov	r5, r1
 8004e14:	d9f4      	bls.n	8004e00 <_printf_i+0x11c>
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d10b      	bne.n	8004e32 <_printf_i+0x14e>
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	07df      	lsls	r7, r3, #31
 8004e1e:	d508      	bpl.n	8004e32 <_printf_i+0x14e>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	6861      	ldr	r1, [r4, #4]
 8004e24:	4299      	cmp	r1, r3
 8004e26:	bfde      	ittt	le
 8004e28:	2330      	movle	r3, #48	; 0x30
 8004e2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e32:	1b92      	subs	r2, r2, r6
 8004e34:	6122      	str	r2, [r4, #16]
 8004e36:	464b      	mov	r3, r9
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f8cd a000 	str.w	sl, [sp]
 8004e40:	aa03      	add	r2, sp, #12
 8004e42:	f7ff fedf 	bl	8004c04 <_printf_common>
 8004e46:	3001      	adds	r0, #1
 8004e48:	d14c      	bne.n	8004ee4 <_printf_i+0x200>
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4e:	b004      	add	sp, #16
 8004e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e54:	4834      	ldr	r0, [pc, #208]	; (8004f28 <_printf_i+0x244>)
 8004e56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e5a:	680e      	ldr	r6, [r1, #0]
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e62:	061f      	lsls	r7, r3, #24
 8004e64:	600e      	str	r6, [r1, #0]
 8004e66:	d514      	bpl.n	8004e92 <_printf_i+0x1ae>
 8004e68:	07d9      	lsls	r1, r3, #31
 8004e6a:	bf44      	itt	mi
 8004e6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e70:	6023      	strmi	r3, [r4, #0]
 8004e72:	b91d      	cbnz	r5, 8004e7c <_printf_i+0x198>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	f023 0320 	bic.w	r3, r3, #32
 8004e7a:	6023      	str	r3, [r4, #0]
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	e7af      	b.n	8004de0 <_printf_i+0xfc>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f043 0320 	orr.w	r3, r3, #32
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	2378      	movs	r3, #120	; 0x78
 8004e8a:	4828      	ldr	r0, [pc, #160]	; (8004f2c <_printf_i+0x248>)
 8004e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e90:	e7e3      	b.n	8004e5a <_printf_i+0x176>
 8004e92:	065e      	lsls	r6, r3, #25
 8004e94:	bf48      	it	mi
 8004e96:	b2ad      	uxthmi	r5, r5
 8004e98:	e7e6      	b.n	8004e68 <_printf_i+0x184>
 8004e9a:	4616      	mov	r6, r2
 8004e9c:	e7bb      	b.n	8004e16 <_printf_i+0x132>
 8004e9e:	680b      	ldr	r3, [r1, #0]
 8004ea0:	6826      	ldr	r6, [r4, #0]
 8004ea2:	1d1d      	adds	r5, r3, #4
 8004ea4:	6960      	ldr	r0, [r4, #20]
 8004ea6:	600d      	str	r5, [r1, #0]
 8004ea8:	0635      	lsls	r5, r6, #24
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	d501      	bpl.n	8004eb2 <_printf_i+0x1ce>
 8004eae:	6018      	str	r0, [r3, #0]
 8004eb0:	e002      	b.n	8004eb8 <_printf_i+0x1d4>
 8004eb2:	0671      	lsls	r1, r6, #25
 8004eb4:	d5fb      	bpl.n	8004eae <_printf_i+0x1ca>
 8004eb6:	8018      	strh	r0, [r3, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4616      	mov	r6, r2
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	e7ba      	b.n	8004e36 <_printf_i+0x152>
 8004ec0:	680b      	ldr	r3, [r1, #0]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	600a      	str	r2, [r1, #0]
 8004ec6:	681e      	ldr	r6, [r3, #0]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	6862      	ldr	r2, [r4, #4]
 8004ece:	f000 f82f 	bl	8004f30 <memchr>
 8004ed2:	b108      	cbz	r0, 8004ed8 <_printf_i+0x1f4>
 8004ed4:	1b80      	subs	r0, r0, r6
 8004ed6:	6060      	str	r0, [r4, #4]
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	2300      	movs	r3, #0
 8004ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee2:	e7a8      	b.n	8004e36 <_printf_i+0x152>
 8004ee4:	4632      	mov	r2, r6
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	4640      	mov	r0, r8
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	47d0      	blx	sl
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d0ab      	beq.n	8004e4a <_printf_i+0x166>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	079b      	lsls	r3, r3, #30
 8004ef6:	d413      	bmi.n	8004f20 <_printf_i+0x23c>
 8004ef8:	68e0      	ldr	r0, [r4, #12]
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	4298      	cmp	r0, r3
 8004efe:	bfb8      	it	lt
 8004f00:	4618      	movlt	r0, r3
 8004f02:	e7a4      	b.n	8004e4e <_printf_i+0x16a>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4632      	mov	r2, r6
 8004f08:	4649      	mov	r1, r9
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	47d0      	blx	sl
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d09b      	beq.n	8004e4a <_printf_i+0x166>
 8004f12:	3501      	adds	r5, #1
 8004f14:	68e3      	ldr	r3, [r4, #12]
 8004f16:	9903      	ldr	r1, [sp, #12]
 8004f18:	1a5b      	subs	r3, r3, r1
 8004f1a:	42ab      	cmp	r3, r5
 8004f1c:	dcf2      	bgt.n	8004f04 <_printf_i+0x220>
 8004f1e:	e7eb      	b.n	8004ef8 <_printf_i+0x214>
 8004f20:	2500      	movs	r5, #0
 8004f22:	f104 0619 	add.w	r6, r4, #25
 8004f26:	e7f5      	b.n	8004f14 <_printf_i+0x230>
 8004f28:	08005249 	.word	0x08005249
 8004f2c:	0800525a 	.word	0x0800525a

08004f30 <memchr>:
 8004f30:	4603      	mov	r3, r0
 8004f32:	b510      	push	{r4, lr}
 8004f34:	b2c9      	uxtb	r1, r1
 8004f36:	4402      	add	r2, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	d101      	bne.n	8004f42 <memchr+0x12>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	e003      	b.n	8004f4a <memchr+0x1a>
 8004f42:	7804      	ldrb	r4, [r0, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	428c      	cmp	r4, r1
 8004f48:	d1f6      	bne.n	8004f38 <memchr+0x8>
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <memcpy>:
 8004f4c:	440a      	add	r2, r1
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f54:	d100      	bne.n	8004f58 <memcpy+0xc>
 8004f56:	4770      	bx	lr
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f64:	d1f9      	bne.n	8004f5a <memcpy+0xe>
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <memmove>:
 8004f68:	4288      	cmp	r0, r1
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	eb01 0402 	add.w	r4, r1, r2
 8004f70:	d902      	bls.n	8004f78 <memmove+0x10>
 8004f72:	4284      	cmp	r4, r0
 8004f74:	4623      	mov	r3, r4
 8004f76:	d807      	bhi.n	8004f88 <memmove+0x20>
 8004f78:	1e43      	subs	r3, r0, #1
 8004f7a:	42a1      	cmp	r1, r4
 8004f7c:	d008      	beq.n	8004f90 <memmove+0x28>
 8004f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f86:	e7f8      	b.n	8004f7a <memmove+0x12>
 8004f88:	4601      	mov	r1, r0
 8004f8a:	4402      	add	r2, r0
 8004f8c:	428a      	cmp	r2, r1
 8004f8e:	d100      	bne.n	8004f92 <memmove+0x2a>
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f9a:	e7f7      	b.n	8004f8c <memmove+0x24>

08004f9c <_free_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d043      	beq.n	800502c <_free_r+0x90>
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f0c      	subs	r4, r1, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfb8      	it	lt
 8004fae:	18e4      	addlt	r4, r4, r3
 8004fb0:	f000 f8d0 	bl	8005154 <__malloc_lock>
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <_free_r+0x94>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	4610      	mov	r0, r2
 8004fba:	b933      	cbnz	r3, 8004fca <_free_r+0x2e>
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	6014      	str	r4, [r2, #0]
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc6:	f000 b8cb 	b.w	8005160 <__malloc_unlock>
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	d90a      	bls.n	8004fe4 <_free_r+0x48>
 8004fce:	6821      	ldr	r1, [r4, #0]
 8004fd0:	1862      	adds	r2, r4, r1
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	bf01      	itttt	eq
 8004fd6:	681a      	ldreq	r2, [r3, #0]
 8004fd8:	685b      	ldreq	r3, [r3, #4]
 8004fda:	1852      	addeq	r2, r2, r1
 8004fdc:	6022      	streq	r2, [r4, #0]
 8004fde:	6063      	str	r3, [r4, #4]
 8004fe0:	6004      	str	r4, [r0, #0]
 8004fe2:	e7ed      	b.n	8004fc0 <_free_r+0x24>
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	b10b      	cbz	r3, 8004fee <_free_r+0x52>
 8004fea:	42a3      	cmp	r3, r4
 8004fec:	d9fa      	bls.n	8004fe4 <_free_r+0x48>
 8004fee:	6811      	ldr	r1, [r2, #0]
 8004ff0:	1850      	adds	r0, r2, r1
 8004ff2:	42a0      	cmp	r0, r4
 8004ff4:	d10b      	bne.n	800500e <_free_r+0x72>
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	4401      	add	r1, r0
 8004ffa:	1850      	adds	r0, r2, r1
 8004ffc:	4283      	cmp	r3, r0
 8004ffe:	6011      	str	r1, [r2, #0]
 8005000:	d1de      	bne.n	8004fc0 <_free_r+0x24>
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4401      	add	r1, r0
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	6053      	str	r3, [r2, #4]
 800500c:	e7d8      	b.n	8004fc0 <_free_r+0x24>
 800500e:	d902      	bls.n	8005016 <_free_r+0x7a>
 8005010:	230c      	movs	r3, #12
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	e7d4      	b.n	8004fc0 <_free_r+0x24>
 8005016:	6820      	ldr	r0, [r4, #0]
 8005018:	1821      	adds	r1, r4, r0
 800501a:	428b      	cmp	r3, r1
 800501c:	bf01      	itttt	eq
 800501e:	6819      	ldreq	r1, [r3, #0]
 8005020:	685b      	ldreq	r3, [r3, #4]
 8005022:	1809      	addeq	r1, r1, r0
 8005024:	6021      	streq	r1, [r4, #0]
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7c9      	b.n	8004fc0 <_free_r+0x24>
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	bf00      	nop
 8005030:	20000164 	.word	0x20000164

08005034 <_malloc_r>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	1ccd      	adds	r5, r1, #3
 8005038:	f025 0503 	bic.w	r5, r5, #3
 800503c:	3508      	adds	r5, #8
 800503e:	2d0c      	cmp	r5, #12
 8005040:	bf38      	it	cc
 8005042:	250c      	movcc	r5, #12
 8005044:	2d00      	cmp	r5, #0
 8005046:	4606      	mov	r6, r0
 8005048:	db01      	blt.n	800504e <_malloc_r+0x1a>
 800504a:	42a9      	cmp	r1, r5
 800504c:	d903      	bls.n	8005056 <_malloc_r+0x22>
 800504e:	230c      	movs	r3, #12
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	2000      	movs	r0, #0
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005056:	f000 f87d 	bl	8005154 <__malloc_lock>
 800505a:	4921      	ldr	r1, [pc, #132]	; (80050e0 <_malloc_r+0xac>)
 800505c:	680a      	ldr	r2, [r1, #0]
 800505e:	4614      	mov	r4, r2
 8005060:	b99c      	cbnz	r4, 800508a <_malloc_r+0x56>
 8005062:	4f20      	ldr	r7, [pc, #128]	; (80050e4 <_malloc_r+0xb0>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b923      	cbnz	r3, 8005072 <_malloc_r+0x3e>
 8005068:	4621      	mov	r1, r4
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f862 	bl	8005134 <_sbrk_r>
 8005070:	6038      	str	r0, [r7, #0]
 8005072:	4629      	mov	r1, r5
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f85d 	bl	8005134 <_sbrk_r>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d123      	bne.n	80050c6 <_malloc_r+0x92>
 800507e:	230c      	movs	r3, #12
 8005080:	4630      	mov	r0, r6
 8005082:	6033      	str	r3, [r6, #0]
 8005084:	f000 f86c 	bl	8005160 <__malloc_unlock>
 8005088:	e7e3      	b.n	8005052 <_malloc_r+0x1e>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	1b5b      	subs	r3, r3, r5
 800508e:	d417      	bmi.n	80050c0 <_malloc_r+0x8c>
 8005090:	2b0b      	cmp	r3, #11
 8005092:	d903      	bls.n	800509c <_malloc_r+0x68>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	441c      	add	r4, r3
 8005098:	6025      	str	r5, [r4, #0]
 800509a:	e004      	b.n	80050a6 <_malloc_r+0x72>
 800509c:	6863      	ldr	r3, [r4, #4]
 800509e:	42a2      	cmp	r2, r4
 80050a0:	bf0c      	ite	eq
 80050a2:	600b      	streq	r3, [r1, #0]
 80050a4:	6053      	strne	r3, [r2, #4]
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f85a 	bl	8005160 <__malloc_unlock>
 80050ac:	f104 000b 	add.w	r0, r4, #11
 80050b0:	1d23      	adds	r3, r4, #4
 80050b2:	f020 0007 	bic.w	r0, r0, #7
 80050b6:	1ac2      	subs	r2, r0, r3
 80050b8:	d0cc      	beq.n	8005054 <_malloc_r+0x20>
 80050ba:	1a1b      	subs	r3, r3, r0
 80050bc:	50a3      	str	r3, [r4, r2]
 80050be:	e7c9      	b.n	8005054 <_malloc_r+0x20>
 80050c0:	4622      	mov	r2, r4
 80050c2:	6864      	ldr	r4, [r4, #4]
 80050c4:	e7cc      	b.n	8005060 <_malloc_r+0x2c>
 80050c6:	1cc4      	adds	r4, r0, #3
 80050c8:	f024 0403 	bic.w	r4, r4, #3
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d0e3      	beq.n	8005098 <_malloc_r+0x64>
 80050d0:	1a21      	subs	r1, r4, r0
 80050d2:	4630      	mov	r0, r6
 80050d4:	f000 f82e 	bl	8005134 <_sbrk_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	d1dd      	bne.n	8005098 <_malloc_r+0x64>
 80050dc:	e7cf      	b.n	800507e <_malloc_r+0x4a>
 80050de:	bf00      	nop
 80050e0:	20000164 	.word	0x20000164
 80050e4:	20000168 	.word	0x20000168

080050e8 <_realloc_r>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	4607      	mov	r7, r0
 80050ec:	4614      	mov	r4, r2
 80050ee:	460e      	mov	r6, r1
 80050f0:	b921      	cbnz	r1, 80050fc <_realloc_r+0x14>
 80050f2:	4611      	mov	r1, r2
 80050f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050f8:	f7ff bf9c 	b.w	8005034 <_malloc_r>
 80050fc:	b922      	cbnz	r2, 8005108 <_realloc_r+0x20>
 80050fe:	f7ff ff4d 	bl	8004f9c <_free_r>
 8005102:	4625      	mov	r5, r4
 8005104:	4628      	mov	r0, r5
 8005106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005108:	f000 f830 	bl	800516c <_malloc_usable_size_r>
 800510c:	42a0      	cmp	r0, r4
 800510e:	d20f      	bcs.n	8005130 <_realloc_r+0x48>
 8005110:	4621      	mov	r1, r4
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ff8e 	bl	8005034 <_malloc_r>
 8005118:	4605      	mov	r5, r0
 800511a:	2800      	cmp	r0, #0
 800511c:	d0f2      	beq.n	8005104 <_realloc_r+0x1c>
 800511e:	4631      	mov	r1, r6
 8005120:	4622      	mov	r2, r4
 8005122:	f7ff ff13 	bl	8004f4c <memcpy>
 8005126:	4631      	mov	r1, r6
 8005128:	4638      	mov	r0, r7
 800512a:	f7ff ff37 	bl	8004f9c <_free_r>
 800512e:	e7e9      	b.n	8005104 <_realloc_r+0x1c>
 8005130:	4635      	mov	r5, r6
 8005132:	e7e7      	b.n	8005104 <_realloc_r+0x1c>

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	2300      	movs	r3, #0
 8005138:	4d05      	ldr	r5, [pc, #20]	; (8005150 <_sbrk_r+0x1c>)
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc ff2c 	bl	8001f9c <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	200004ac 	.word	0x200004ac

08005154 <__malloc_lock>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__malloc_lock+0x8>)
 8005156:	f000 b811 	b.w	800517c <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	200004b4 	.word	0x200004b4

08005160 <__malloc_unlock>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__malloc_unlock+0x8>)
 8005162:	f000 b80c 	b.w	800517e <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	200004b4 	.word	0x200004b4

0800516c <_malloc_usable_size_r>:
 800516c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005170:	1f18      	subs	r0, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfbc      	itt	lt
 8005176:	580b      	ldrlt	r3, [r1, r0]
 8005178:	18c0      	addlt	r0, r0, r3
 800517a:	4770      	bx	lr

0800517c <__retarget_lock_acquire_recursive>:
 800517c:	4770      	bx	lr

0800517e <__retarget_lock_release_recursive>:
 800517e:	4770      	bx	lr

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr
